<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZhangXiao&#39;s Blog</title>
  
  <subtitle>清风湿润，茶烟轻扬。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangxiaocn.github.io/"/>
  <updated>2019-10-30T12:52:53.323Z</updated>
  <id>https://zhangxiaocn.github.io/</id>
  
  <author>
    <name>Zhang Xiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PID 基础公式及程序</title>
    <link href="https://zhangxiaocn.github.io/2019/10/30/study-note-pid/"/>
    <id>https://zhangxiaocn.github.io/2019/10/30/study-note-pid/</id>
    <published>2019-10-30T12:21:32.000Z</published>
    <updated>2019-10-30T12:52:53.323Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>仅用于备份本人所写笔记，如有错误或不完善之处还请包含。转载请注明出处！</p></blockquote><h1 id="位置式离散-pid"><a class="markdownIt-Anchor" href="#位置式离散-pid"></a> 位置式离散 PID：</h1><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>w</mi><mi>m</mi><mo>=</mo><mi>K</mi><mi>p</mi><mo>×</mo><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>+</mo><mi>K</mi><mi>i</mi><mo>×</mo><mo>∑</mo><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>+</mo><mi>K</mi><mi>d</mi><mo>×</mo><mo stretchy="false">[</mo><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>−</mo><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pwm = Kp \times e(k) + Ki \times \sum e(k) + Kd \times [e(k) - e(k-1)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span> : 本次偏差</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e(k-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> : 上次偏差</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum e(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span> : <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span> 以及之前的偏差的累计和；其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo>…</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">1, 2, 3\ldotsk</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>；</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>w</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">Pwm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">m</span></span></span></span> : 代表输出</li></ul><p>C 语言的实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 位置式离散 PID</span></span><br><span class="line"><span class="comment">// P = Kp * err;</span></span><br><span class="line"><span class="comment">// I = Ki * integral_err;</span></span><br><span class="line"><span class="comment">// D = Kd * (err - last_err);</span></span><br><span class="line"><span class="comment">// Pwm = P + I + D;</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">PositionPid</span><span class="params">(<span class="keyword">int</span> encoder, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">float</span> err = <span class="number">0</span>, last_err = <span class="number">0</span>, integral_err = <span class="number">0</span>, pwm = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> kp = <span class="number">1</span>, ki = <span class="number">1</span>, kd = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    err = encoder - target;  <span class="comment">// 计算偏差</span></span><br><span class="line">    integral_err += err;  <span class="comment">// 求出偏差积分</span></span><br><span class="line">    pwm = kp * err + ki * integral_err + kd * (err - last_err);</span><br><span class="line">    last_err = err;  <span class="comment">// 保存上一次偏差</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pwm;  <span class="comment">// 输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在舵机角度控制闭环系统里，只使用 PD 控制，因此可将 PID 控制简化为此公式：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>w</mi><mi>m</mi><mo>=</mo><mi>K</mi><mi>p</mi><mo>×</mo><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>+</mo><mi>K</mi><mi>d</mi><mo>×</mo><mo stretchy="false">[</mo><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>−</mo><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pwm = Kp \times e(k) + Kd \times [e(k) - e(k-1)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></p><p>代码更改如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 位置式离散 PD</span></span><br><span class="line"><span class="comment">// P = Kp * err;</span></span><br><span class="line"><span class="comment">// D = Kd * (err - last_err);</span></span><br><span class="line"><span class="comment">// Pwm = P + D;</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">PositionPid</span><span class="params">(<span class="keyword">int</span> encoder, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">float</span> err = <span class="number">0</span>, last_err = <span class="number">0</span>, integral_err = <span class="number">0</span>, pwm = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> kp = <span class="number">1</span>, ki = <span class="number">1</span>, kd = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    err = encoder - target;  <span class="comment">// 计算偏差</span></span><br><span class="line">    pwm = kp * err + kd * (err - last_err);</span><br><span class="line">    last_err = err;  <span class="comment">// 保存上一次偏差</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pwm;  <span class="comment">// 输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PID 参数整定：</p><ul><li>P：用于提高相应速度</li><li>I：用于减小静差</li><li>D：用于抑制震荡</li></ul><h1 id="增量式离散-pid"><a class="markdownIt-Anchor" href="#增量式离散-pid"></a> 增量式离散 PID：</h1><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>w</mi><mi>m</mi><mo>+</mo><mo>=</mo><mi>K</mi><mi>p</mi><mo>×</mo><mo stretchy="false">[</mo><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>−</mo><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>+</mo><mi>K</mi><mi>i</mi><mo>×</mo><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>+</mo><mi>K</mi><mi>d</mi><mo>×</mo><mo stretchy="false">[</mo><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>−</mo><mn>2</mn><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pwm += Kp × [e(k) - e(k-1)] + Ki × e(k) + Kd × [e(k) - 2e(k-1) + e(k-2)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">m</span><span class="mord">+</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span> : 本次偏差</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e(k-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> : 上次的偏差</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e(k-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span> : 上上次的偏差</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>w</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">Pwm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">m</span></span></span></span> : 代表增量输出</li></ul><p>C 语言实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增量式离散 PID</span></span><br><span class="line"><span class="comment">// P = Kp * (err - last_err);</span></span><br><span class="line"><span class="comment">// I = Ki * err;</span></span><br><span class="line"><span class="comment">// D = Kd * (err - 2 * last_err + before_err);</span></span><br><span class="line"><span class="comment">// Pwm += P + I + D;</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">IncrementalPid</span><span class="params">(<span class="keyword">int</span> encoder, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">float</span> err = <span class="number">0</span>, last_err = <span class="number">0</span>, before_err = <span class="number">0</span>, pwm = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> kp = <span class="number">1</span>, ki = <span class="number">1</span>, kd = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    err = encoder - target;  <span class="comment">// 计算偏差</span></span><br><span class="line">    pwm += kp * (err - last_err) + ki * err +</span><br><span class="line">          kd * (err - <span class="number">2</span> * last_err + before_err);  <span class="comment">// 增量式 PI 控制器</span></span><br><span class="line">    before_err = last_err;  <span class="comment">// 保存上上次偏差</span></span><br><span class="line">    last_err = err;  <span class="comment">// 保存上一次偏差</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pwm;  <span class="comment">// 增量输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在速度控制闭环系统里，只使用 PI 控制，因此可将 PID 控制简化为此公式：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>w</mi><mi>m</mi><mo>+</mo><mo>=</mo><mi>K</mi><mi>p</mi><mo>×</mo><mo stretchy="false">[</mo><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>−</mo><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>+</mo><mi>K</mi><mi>i</mi><mo>×</mo><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Pwm += Kp × [e(k) - e(k-1)] + Ki × e(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">m</span><span class="mord">+</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></p><p>代码更改如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增量式离散 PI</span></span><br><span class="line"><span class="comment">// P = Kp * (err - last_err);</span></span><br><span class="line"><span class="comment">// I = Ki * err;</span></span><br><span class="line"><span class="comment">// Pwm += P + I;</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">IncrementalPid</span><span class="params">(<span class="keyword">int</span> encoder, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">float</span> err = <span class="number">0</span>, last_err = <span class="number">0</span>, pwm = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> kp = <span class="number">1</span>, ki = <span class="number">1</span>, kd = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    err = encoder - target;  <span class="comment">// 计算偏差</span></span><br><span class="line">    pwm += kp * (err - last_err) + ki * err;  <span class="comment">// 增量式 PI 控制器</span></span><br><span class="line">    last_err = err;  <span class="comment">// 保存上一次偏差</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pwm;  <span class="comment">// 增量输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;仅用于备份本人所写笔记，如有错误或不完善之处还请包含。转载请注明出处！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;位置式离散-pid&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#位置式离散-pid&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://zhangxiaocn.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PID" scheme="https://zhangxiaocn.github.io/tags/PID/"/>
    
  </entry>
  
  <entry>
    <title>K60 中断的使用</title>
    <link href="https://zhangxiaocn.github.io/2019/10/30/k60-interrupt/"/>
    <id>https://zhangxiaocn.github.io/2019/10/30/k60-interrupt/</id>
    <published>2019-10-30T12:16:02.000Z</published>
    <updated>2019-10-30T12:18:34.948Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>仅用于备份本人所写笔记，如有错误或不完善之处还请包含。转载请注明出处！</p><p>程序使用逐飞科技 K60 库 V2.0.3</p></blockquote><p>首先，中断需要初始化以及定义中断的时间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pit_init_ms(pit1, <span class="number">1</span>);    <span class="comment">// 设置中断时间为 1ms</span></span><br></pre></td></tr></table></figure><p>中断时间过长，会造成程序运行后出现的效果非常迟钝。</p><p>中断时间过短，可能会使中断里的程序运行时间不够，从而造成溢出。</p><p>所以在时间方面需要细心拿捏。</p><p>设置中断的优先级：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_irq_priority(PIT1_IRQn, <span class="number">1</span>);    <span class="comment">// 设置优先级</span></span><br></pre></td></tr></table></figure><p>设置完成后，就可以打开中断，开始运行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enable_irq(PIT1_IRQn);    <span class="comment">// 打开中断 1</span></span><br></pre></td></tr></table></figure><p>运行中断时，需要注意中断里的程序最好不要过多，尽可能不要有延时函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中断 1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PIT1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户程序</span></span><br><span class="line">    </span><br><span class="line">    PIT_FlAG_CLR(pit1);    <span class="comment">// 中断标志清除</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就基本实现了中断的初始化及运行。</p><p>当然我们也可以同时用两个甚至多个中断，让它们同时运行。但是，中断过多可能会出现一些问题。比如：</p><ol><li>出现同时两个中断满足进入中断的条件时，这时就会根据中断优先级进行判断先进入哪个中断服务程序里，高优先级的执行完毕才会进入低优先级中断。</li><li>如果正在执行中断服务程序（中断1）时，另一个中断（中断2）触发，如果 2 优先级高于 1，那么会立即执行中断2的服务程序，等中断2 执行完毕，才会继续执行中断1。如果中断 2 优先级低于中断1，则等待中断1 执行完毕才会执行中断2。</li></ol><p>也就是说，如果两个或者多个中断同时满足运行条件，可能会造成低优先级中断里的程序没有机会运行，从而影响使用。所以，没有太大必要的情况下，不建议同时使用多个中断。</p><p>那么，如果只用一个中断，而我又需要让程序在不同的时间下运行该怎么办呢？</p><p>如下给出一个可行的方案：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中断 0，计时 1ms</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PIT0_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    timeCount++;    <span class="comment">// 每运行一次中断，值 +1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (timeCount % <span class="number">1</span> == <span class="number">0</span> ) &#123; timeFlag_1ms = <span class="number">1</span>; &#125;    <span class="comment">// 1ms 标志</span></span><br><span class="line">    <span class="keyword">if</span> (timeCount % <span class="number">2</span> == <span class="number">0</span> ) &#123; timeFlag_2ms = <span class="number">1</span>; &#125;    <span class="comment">// 2ms 标志</span></span><br><span class="line">    <span class="keyword">if</span> (timeCount % <span class="number">5</span> == <span class="number">0</span> ) &#123; timeFlag_5ms = <span class="number">1</span>; &#125;    <span class="comment">// 5ms 标志</span></span><br><span class="line">    <span class="keyword">if</span> (timeCount % <span class="number">10</span> == <span class="number">0</span> ) &#123; timeFlag_10ms = <span class="number">1</span>; &#125;    <span class="comment">// 10ms 标志</span></span><br><span class="line">    <span class="keyword">if</span> (timeCount % <span class="number">20</span> == <span class="number">0</span> ) &#123; timeFlag_20ms = <span class="number">1</span>; &#125;    <span class="comment">// 20ms 标志</span></span><br><span class="line">    <span class="keyword">if</span> (timeCount % <span class="number">50</span> == <span class="number">0</span> ) &#123; timeFlag_50ms = <span class="number">1</span>; &#125;    <span class="comment">// 50ms 标志</span></span><br><span class="line">    <span class="keyword">if</span> (timeCount % <span class="number">200</span> == <span class="number">0</span> ) &#123; timeFlag_200ms = <span class="number">1</span>; timeCount = <span class="number">0</span>; &#125;    <span class="comment">// 200ms 标志，并清除计时标志</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (timeFlag_1ms == <span class="number">1</span>) &#123; timeFlag_1ms = <span class="number">0</span>;  ... &#125;    <span class="comment">// 每 1ms 运行一次程序</span></span><br><span class="line">    <span class="keyword">if</span> (timeFlag_2ms == <span class="number">1</span>) &#123; timeFlag_2ms = <span class="number">0</span>;  ... &#125;    <span class="comment">// 每 2ms 运行一次程序</span></span><br><span class="line">    <span class="keyword">if</span> (timeFlag_5ms == <span class="number">1</span>) &#123; timeFlag_5ms = <span class="number">0</span>;  ... &#125;    <span class="comment">// 每 5ms 运行一次程序</span></span><br><span class="line">    <span class="keyword">if</span> (timeFlag_10ms == <span class="number">1</span>) &#123; timeFlag_10ms = <span class="number">0</span>;  ... &#125;    <span class="comment">// 每 10ms 运行一次程序</span></span><br><span class="line">    <span class="keyword">if</span> (timeFlag_20ms == <span class="number">1</span>) &#123; timeFlag_20ms = <span class="number">0</span>;  ... &#125;    <span class="comment">// 每 20ms 运行一次程序</span></span><br><span class="line">    <span class="keyword">if</span> (timeFlag_50ms == <span class="number">1</span>) &#123; timeFlag_50ms = <span class="number">0</span>;  ... &#125;    <span class="comment">// 每 50ms 运行一次程序</span></span><br><span class="line">    <span class="keyword">if</span> (timeFlag_200ms == <span class="number">1</span>) &#123; timeFlag_200ms = <span class="number">0</span>;  ... &#125;    <span class="comment">// 每 200ms 运行一次程序</span></span><br><span class="line"></span><br><span class="line">    PIT_FlAG_CLR(pit0);    <span class="comment">// 中断标志清除</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，让中断里的程序每 200ms 实现一次循环。只要将每个程序的运行时间设置到位，便可以让各个程序在不同的时间下运行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;仅用于备份本人所写笔记，如有错误或不完善之处还请包含。转载请注明出处！&lt;/p&gt;
&lt;p&gt;程序使用逐飞科技 K60 库 V2.0.3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先，中断需要初始化以及定义中断的时间：&lt;/p&gt;
&lt;figure class
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://zhangxiaocn.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="K60" scheme="https://zhangxiaocn.github.io/tags/K60/"/>
    
  </entry>
  
  <entry>
    <title>OpenMV 扫描 QR 码 + 串口通信</title>
    <link href="https://zhangxiaocn.github.io/2019/10/29/openmv-study-note-1/"/>
    <id>https://zhangxiaocn.github.io/2019/10/29/openmv-study-note-1/</id>
    <published>2019-10-29T13:46:29.000Z</published>
    <updated>2019-10-29T13:50:24.117Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>部分内容来自 <a href="http://book.myopenmv.com/" target="_blank" rel="noopener">凡哥带你玩转OpenMV</a> 以及 <a href="http://book.openmv.cc/quick-starter.html" target="_blank" rel="noopener">OpenMV中文入门教程</a>。</p></blockquote><h1 id="使用-ttl-usb-模块"><a class="markdownIt-Anchor" href="#使用-ttl-usb-模块"></a> 使用 TTL-USB 模块</h1><blockquote><p>备份一下我用的 TTL-USB 模块各接口，红线是 <code>5V</code> ，粉色线是 <code>3V3</code> ，蓝色线是 <code>TX</code> ，绿色线是 <code>RX</code> ，黑色线是 <code>GND</code></p></blockquote><p>两个单片机进行串口通信，最少需要三根线相连：</p><ul><li>发送端 TX</li><li>接收端 RX</li><li>地线 GND</li></ul><p>例如 A 和 B 两个单片机，A 的 <code>RX</code> 需要接 B 的 <code>TX</code> ，B 的 <code>RX</code> 需要接 A 的 <code>TX</code> ，二者的地线 <code>GND</code> 相连作为参考电平。</p><blockquote><p><strong>VCC 可接可不接，USB 的串口是 5V 的，如果要接 OpenMV 板子上的话， 需要接在 OpenMV 的 VIN 上， 如果接在 3v3, 也就是 3.3v 的接口处， 会使所有的元器件暴露在 5v 的电压下， 导致电子元器件全部烧毁</strong>。</p></blockquote><h1 id="openmv-串口资源"><a class="markdownIt-Anchor" href="#openmv-串口资源"></a> OpenMV 串口资源</h1><p>OpenMV 引脚图 <strong>UART 3</strong> ：</p><table><thead><tr><th style="text-align:center">Pin Name</th><th style="text-align:center">Uart Index</th><th style="text-align:center">Role</th></tr></thead><tbody><tr><td style="text-align:center">P4</td><td style="text-align:center">串口 3</td><td style="text-align:center">TX 发送端</td></tr><tr><td style="text-align:center">P5</td><td style="text-align:center">串口 3</td><td style="text-align:center">RX 接收端</td></tr></tbody></table><h1 id="串口助手"><a class="markdownIt-Anchor" href="#串口助手"></a> 串口助手</h1><p>推荐下载星瞳串口助手：<a href="https://singtown.com/singtownserialport/" target="_blank" rel="noopener">https://singtown.com/singtownserialport/</a></p><p>或者友善串口调试助手，百度搜索下载即可。</p><p>软件设置：</p><ul><li>波特率：115200</li><li>数据为：8</li><li>校验位：None</li><li>停止位：1</li><li>流控：None</li><li>接收设置：ASCII</li><li>发送设置：Hex</li></ul><h1 id="串口通信程序"><a class="markdownIt-Anchor" href="#串口通信程序"></a> 串口通信程序</h1><h2 id="uart-对象"><a class="markdownIt-Anchor" href="#uart-对象"></a> UART 对象</h2><blockquote><p>更多详细操作请转到 UART 官方文档：</p><p><a href="http://docs.micropython.org/en/latest/pyboard/library/pyb.UART.html?highlight=uart" target="_blank" rel="noopener">http://docs.micropython.org/en/latest/pyboard/library/pyb.UART.html?highlight=uart</a></p></blockquote><p>初始化UART对象：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 初始化一个串口对象</span></span><br><span class="line"><span class="comment">* uart_idx  , 串口 ID， 我们这里只能写 1 或者 3</span></span><br><span class="line"><span class="comment">* baud_rate , 波特率 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">UART(uart_idx, baud_rate)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化 UART 对象</span></span><br><span class="line">uart = UART(<span class="number">3</span>, <span class="number">115200</span>)</span><br></pre></td></tr></table></figure><p>更多操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读写操作</span></span><br><span class="line">uart.read(<span class="number">10</span>)        <span class="comment"># 读入 10 个字符， 返回一个比特对象                    </span></span><br><span class="line">uart.read()          <span class="comment"># 读取所有的有效字符</span></span><br><span class="line">uart.readline()      <span class="comment"># 读入一行</span></span><br><span class="line">uart.readinto(buf)   <span class="comment"># 读入并且保存在缓存中</span></span><br><span class="line">uart.write(<span class="string">'abc'</span>)    <span class="comment"># 向串口写入3个字符abc</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单个字符的读取与写入</span></span><br><span class="line">uart.readchar()      <span class="comment"># 读入一个字符</span></span><br><span class="line">uart.writechar(<span class="number">42</span>)   <span class="comment"># 写入 ASCALL 码为 42 的字符</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断串口是否有数据</span></span><br><span class="line">uart.any()</span><br></pre></td></tr></table></figure><h2 id="向串口发送数据"><a class="markdownIt-Anchor" href="#向串口发送数据"></a> 向串口发送数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pyb <span class="keyword">import</span> UART</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 UART 对象</span></span><br><span class="line">uart = UART(<span class="number">3</span>, <span class="number">115200</span>)</span><br><span class="line">uart.init(<span class="number">115200</span>, bits=<span class="number">8</span>, parity=<span class="literal">None</span>, stop=<span class="number">1</span>) <span class="comment"># init with given parameters</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    uart.write(<span class="string">"Hello World!!!\r"</span>)</span><br><span class="line">    print(<span class="string">"Hello World"</span>)</span><br><span class="line">    time.sleep(<span class="number">1000</span>)  <span class="comment"># 休眠 1s</span></span><br></pre></td></tr></table></figure><h2 id="向串口接收数据"><a class="markdownIt-Anchor" href="#向串口接收数据"></a> 向串口接收数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pyb <span class="keyword">import</span> UART</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 UART 对象</span></span><br><span class="line">uart = UART(<span class="number">3</span>, <span class="number">115200</span>)</span><br><span class="line">uart.init(<span class="number">115200</span>, bits=<span class="number">8</span>, parity=<span class="literal">None</span>, stop=<span class="number">1</span>) <span class="comment"># init with given parameters</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    <span class="comment"># 判断是否有数据</span></span><br><span class="line">    <span class="keyword">if</span> uart.any():</span><br><span class="line">        tmp_data = uart.readline()</span><br><span class="line">        print(tmp_data)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1000</span>)  <span class="comment"># 休眠 1s</span></span><br></pre></td></tr></table></figure><h2 id="数据双向发送与接收"><a class="markdownIt-Anchor" href="#数据双向发送与接收"></a> 数据双向发送与接收</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pyb <span class="keyword">import</span> UART</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 UART 对象</span></span><br><span class="line">uart = UART(<span class="number">3</span>, <span class="number">115200</span>)</span><br><span class="line">uart.init(<span class="number">115200</span>, bits=<span class="number">8</span>, parity=<span class="literal">None</span>, stop=<span class="number">1</span>) <span class="comment"># init with given parameters</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sending_data</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> uart</span><br><span class="line">    uart.write(<span class="string">"HelloWorld!!!\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recive_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> uart</span><br><span class="line">    <span class="keyword">if</span> uart.any():</span><br><span class="line">        tmp_data = uart.readline()</span><br><span class="line">        uart.write(<span class="string">"Recived : %s\n"</span> % tmp_data)</span><br><span class="line">        print(tmp_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    sending_data()</span><br><span class="line">    recive_data()</span><br><span class="line">    time.sleep(<span class="number">1000</span>)  <span class="comment"># 休眠 1s</span></span><br></pre></td></tr></table></figure><h1 id="扫描-qr-码"><a class="markdownIt-Anchor" href="#扫描-qr-码"></a> 扫描 QR 码</h1><p>可以用 <a href="http://cli.im/" target="_blank" rel="noopener">草料二维码</a> 生成想要的 QR 码内容</p><p>程序如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sensor, image</span><br><span class="line"></span><br><span class="line">sensor.reset()</span><br><span class="line">sensor.set_pixformat(sensor.RGB565)</span><br><span class="line">sensor.set_framesize(sensor.QQVGA)  <span class="comment"># can be QVGA on M7...</span></span><br><span class="line">sensor.skip_frames(<span class="number">30</span>)              <span class="comment"># 修改 sensor 配置之后，跳过30帧</span></span><br><span class="line">sensor.set_auto_gain(<span class="literal">False</span>)         <span class="comment"># must turn this off to prevent image washout...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    img = sensor.snapshot()         <span class="comment"># 拍摄一张照片，snapshot() 函数返回一个 image 对象</span></span><br><span class="line">    img.lens_corr(<span class="number">1.8</span>)              <span class="comment"># strength of 1.8 is good for the 2.8mm lens.</span></span><br><span class="line">                                    <span class="comment"># 用来防止 115 度的摄像头拍摄出来的图像畸变(鱼眼)</span></span><br><span class="line">    <span class="keyword">for</span> code <span class="keyword">in</span> img.find_qrcodes(): <span class="comment"># find_qrcodes 用于寻找二维码</span></span><br><span class="line">        print(code)</span><br><span class="line">        <span class="comment"># 返回对象格式如下：</span></span><br><span class="line">        <span class="comment"># &#123;x:**, y:**, w:**, h:**, payload:"**", version:*, ecc_level:*, mask:*, data_type:*, eci:*&#125;</span></span><br><span class="line">        <span class="comment"># payload 就是在二维码下隐藏的信息</span></span><br></pre></td></tr></table></figure><h1 id="扫描-qr-码后通过串口发送数据"><a class="markdownIt-Anchor" href="#扫描-qr-码后通过串口发送数据"></a> 扫描 QR 码后通过串口发送数据</h1><p>简单说就是把串口发送数据程序和扫描 QR 码程序放在一块就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pyb <span class="keyword">import</span> UART</span><br><span class="line"><span class="keyword">import</span> sensor, image</span><br><span class="line"></span><br><span class="line">sensor.reset()</span><br><span class="line">sensor.set_pixformat(sensor.RGB565)</span><br><span class="line">sensor.set_framesize(sensor.QQVGA)  <span class="comment"># can be QVGA on M7...</span></span><br><span class="line">sensor.skip_frames(<span class="number">30</span>)              <span class="comment"># 修改 sensor 配置之后，跳过30帧</span></span><br><span class="line">sensor.set_auto_gain(<span class="literal">False</span>)         <span class="comment"># must turn this off to prevent image washout...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 UART 对象</span></span><br><span class="line">uart = UART(<span class="number">3</span>, <span class="number">115200</span>)</span><br><span class="line">uart.init(<span class="number">115200</span>, bits = <span class="number">8</span>, parity = <span class="literal">None</span>, stop = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    img = sensor.snapshot()         <span class="comment"># 拍摄一张照片，snapshot() 函数返回一个 image 对象</span></span><br><span class="line">    img.lens_corr(<span class="number">1.8</span>)              <span class="comment"># 用来防止 115 度的摄像头拍摄出来的图像畸变(鱼眼)</span></span><br><span class="line">    <span class="keyword">for</span> code <span class="keyword">in</span> img.find_qrcodes(): <span class="comment"># find_qrcodes 用于寻找二维码</span></span><br><span class="line">        uart.write(code.payload())  <span class="comment"># 串口读取二维码数据</span></span><br><span class="line">        <span class="comment"># if code = "123"</span></span><br><span class="line">        <span class="comment"># 返回对象格式如下：</span></span><br><span class="line">        <span class="comment"># &#123;x, y, w, h, payload:"**", version:*, ecc_level:*, mask:*, data_type:*, eci:*&#125;</span></span><br><span class="line">        <span class="comment"># payload 就是我们在二维码下隐藏的信息</span></span><br><span class="line">        print(code)      <span class="comment"># 输出二维码内容</span></span><br><span class="line">        time.sleep(<span class="number">500</span>)  <span class="comment"># 休息 0.5s</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;部分内容来自 &lt;a href=&quot;http://book.myopenmv.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;凡哥带你玩转OpenMV&lt;/a&gt; 以及 &lt;a href=&quot;http://book.openmv.cc
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://zhangxiaocn.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="OpenMV" scheme="https://zhangxiaocn.github.io/tags/OpenMV/"/>
    
  </entry>
  
  <entry>
    <title>简述 K60 直流电机闭环控制</title>
    <link href="https://zhangxiaocn.github.io/2019/10/29/k60-motor-control/"/>
    <id>https://zhangxiaocn.github.io/2019/10/29/k60-motor-control/</id>
    <published>2019-10-29T13:41:02.000Z</published>
    <updated>2019-10-29T13:44:33.298Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>仅用于备份本人所写笔记，如有错误或不完善之处还请包含。转载请注明出处！</p><p>程序使用逐飞科技 K60 库 V2.0.3</p></blockquote><p>电机速度闭环控制，简单来说就是将电机的输出量（速度）通过编码器反馈到控制端（单片机），然后对该输出量和设定的输入量进行比对，接着经过 PID 运算，将运算结果输入给电机的过程。</p><p>电机速度闭环一个显而易见的好处就是，可以让小车在不同的路段动态调整小车的速度，如果参数调整的好，可以让小车极大的提升对赛道的适应性能，减少小车跑完一圈所需的时间。</p><p>闭环控制思路比较简单，首先需要获取编码器的值，每 4ms 取一次值（可以设定其他时间），然后将取到的值进行相应的计算，得出电机当前速度。</p><p>代码示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> unit_pulse = <span class="number">1783.0</span>;  <span class="comment">// 小车轮胎旋转一周（360°）的脉冲</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> motor_radius = <span class="number">0.063</span>;  <span class="comment">// 电机轮胎半径（米）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码器初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EncoderInit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    ftm_quad_init(ftm2);  <span class="comment">// 初始化 ftm2 为正交解码</span></span><br><span class="line"></span><br><span class="line">    port_init_NoAlt(B18, PULLUP);  <span class="comment">// 上拉</span></span><br><span class="line">    port_init_NoAlt(B19, PULLUP);  <span class="comment">// 上拉</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取编码器值</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">EncoderRead</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> data = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    data = ftm_quad_get(ftm2);  <span class="comment">// 获取编码器的脉冲值</span></span><br><span class="line">    ftm_quad_clean(ftm2);       <span class="comment">// 清除正交解码的脉冲值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算电机当前速度</span></span><br><span class="line"><span class="comment">// 输入值为运行该程序的间隔时间</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">GetMotorSpeed</span><span class="params">(uint16 run_time_ms)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> motor_speed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    encoder.finalValue +=</span><br><span class="line">        <span class="number">0.25f</span> * (encoder.value - encoder.finalValue);  <span class="comment">// 一阶低通滤波</span></span><br><span class="line">    encoder.motorRounds =</span><br><span class="line">        (encoder.finalValue * run_time_ms) / unit_pulse;  <span class="comment">// 电机每 1s 转的圈数</span></span><br><span class="line">    encoder.motorDistance =</span><br><span class="line">        encoder.motorRounds * (<span class="number">2</span> * PI * motor_radius);  <span class="comment">// 电机运行长度 m</span></span><br><span class="line">    motor_speed = encoder.motorDistance / <span class="number">1</span>;            <span class="comment">// 电机速度 m/s</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> motor_speed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算出速度后，把该变量赋值给 PID 计算，算出需要输出给电机的占空比。PID 计算公式可以根据实际情况稍作修改优化。</p><p>代码示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 电机 pid 程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MotorPid</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">float</span> err, last_err, expect_pwm;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请根据实际情况修改 KP、KI 参数大小</span></span><br><span class="line">    motor_pid.kp = <span class="number">0.1</span>;</span><br><span class="line">    motor_pid.ki = <span class="number">0.2</span>;</span><br><span class="line"></span><br><span class="line">    err = motor.expectSpeed - encoder.motorSpeed;</span><br><span class="line">    expect_pwm += motor_pid.kp * (err - last_err) + motor_pid.ki * err;</span><br><span class="line">    last_err = err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 电机占空比限幅</span></span><br><span class="line">    <span class="comment">// 请根据实际情况修改最大和最小 PWM 参数值</span></span><br><span class="line">    <span class="keyword">if</span> (expect_pwm &gt; <span class="number">260</span>) expect_pwm = <span class="number">260</span>;</span><br><span class="line">    <span class="keyword">if</span> (expect_pwm &lt;= <span class="number">0</span>) expect_pwm = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将值转换为正整数类型</span></span><br><span class="line">    motor.expectDutyRatio = (uint16)(expect_pwm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PID 返回期望占空比赋值给电机控制函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 电机控制程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MotorControl</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    MotorPid();</span><br><span class="line">    MotorPWM(<span class="number">0</span>, motor.expectDutyRatio);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就实现了简单的电机速度闭环控制。当然这只算是比较基础的闭环，若要实现复杂功能，还需进行大量优化。</p><p>如下为本文闭环全部代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************************************</span></span><br><span class="line"><span class="comment"> * COPYRIGHT NOTICE</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019, ZhangXiao</span></span><br><span class="line"><span class="comment"> * All rights reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 本文件仅供参考交流，未经允许不得用于商业用途！</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * File           : motor.c</span></span><br><span class="line"><span class="comment"> * Author         : ZhangXiao</span></span><br><span class="line"><span class="comment"> * Blog           : zhangxiaocn.github.io</span></span><br><span class="line"><span class="comment"> * Version        : v1.0.1</span></span><br><span class="line"><span class="comment"> * Date           : 2019-08-06</span></span><br><span class="line"><span class="comment"> * Software       : IAR 7.70.1</span></span><br><span class="line"><span class="comment"> * Description    : 电机相关程序以及 PID、编码器程序等</span></span><br><span class="line"><span class="comment"> * note           : None</span></span><br><span class="line"><span class="comment">********************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"motor.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"headfile.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> unit_pulse = <span class="number">1783.0</span>;   <span class="comment">// 小车轮胎旋转一周（360°）的脉冲</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> motor_radius = <span class="number">0.063</span>;  <span class="comment">// 电机轮胎半径（米）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 电机 pid 程序结构体参数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MOTOR_PID</span> <span class="title">motor_pid</span> = &#123;</span><span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码器结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ENCODER</span> <span class="title">encoder</span> = &#123;</span><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 电机结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MOTOR</span> <span class="title">motor</span> = &#123;</span><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 电机初始化</span></span><br><span class="line"><span class="comment">// FTM1_CH0_PIN 端口为 A12</span></span><br><span class="line"><span class="comment">// FTM1_CH1_PIN 端口为 A13</span></span><br><span class="line"><span class="comment">// 电机初始化频率默认为 10k，请根据实际情况更改频率大小</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MotorInit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    ftm_pwm_init(ftm1, ftm_ch0, <span class="number">10</span> * <span class="number">1000</span>, <span class="number">0</span>);</span><br><span class="line">    ftm_pwm_init(ftm1, ftm_ch1, <span class="number">10</span> * <span class="number">1000</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 电机 PWM 控制</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MotorPWM</span><span class="params">(uint16 pwm_1, uint16 pwm_2)</span> </span>&#123;</span><br><span class="line">    ftm_pwm_duty(ftm1, ftm_ch0, pwm_1);  <span class="comment">// A12 端口</span></span><br><span class="line">    ftm_pwm_duty(ftm1, ftm_ch1, pwm_2);  <span class="comment">// A13 端口</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码器初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EncoderInit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    ftm_quad_init(ftm2);  <span class="comment">// 初始化 ftm2 为正交解码</span></span><br><span class="line"></span><br><span class="line">    port_init_NoAlt(B18, PULLUP);  <span class="comment">// 上拉</span></span><br><span class="line">    port_init_NoAlt(B19, PULLUP);  <span class="comment">// 上拉</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取编码器值</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">EncoderRead</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> data = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    data = ftm_quad_get(ftm2);  <span class="comment">// 获取编码器的脉冲值</span></span><br><span class="line">    ftm_quad_clean(ftm2);       <span class="comment">// 清除正交解码的脉冲值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算电机当前速度</span></span><br><span class="line"><span class="comment">// 输入值为运行该程序的间隔时间</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">GetMotorSpeed</span><span class="params">(uint16 run_time_ms)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> motor_speed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    encoder.finalValue +=</span><br><span class="line">        <span class="number">0.25f</span> * (encoder.value - encoder.finalValue);  <span class="comment">// 一阶低通滤波</span></span><br><span class="line">    encoder.motorRounds =</span><br><span class="line">        (encoder.finalValue * run_time_ms) / unit_pulse;  <span class="comment">// 电机每 1s 转的圈数</span></span><br><span class="line">    encoder.motorDistance =</span><br><span class="line">        encoder.motorRounds * (<span class="number">2</span> * PI * motor_radius);  <span class="comment">// 电机运行长度 m</span></span><br><span class="line">    motor_speed = encoder.motorDistance / <span class="number">1</span>;            <span class="comment">// 电机速度 m/s</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> motor_speed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算电机运行距离</span></span><br><span class="line"><span class="comment">// 输入值为运行该程序的间隔时间</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">GetMotorDistance</span><span class="params">(uint16 run_time_ms)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> encoder.motorDistance / run_time_ms;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码器相关参数计算</span></span><br><span class="line"><span class="comment">// 输入值为运行该程序的间隔时间</span></span><br><span class="line"><span class="comment">// 程序建议每 4ms 运行一次，即 Encoder_Calculate(4);</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EncoderCalculate</span><span class="params">(uint16 run_time_ms)</span> </span>&#123;</span><br><span class="line">    uint16 run_time = <span class="number">1000</span> / run_time_ms;  <span class="comment">// 每秒钟运行此程序次数</span></span><br><span class="line"></span><br><span class="line">    encoder.value = EncoderRead();                 <span class="comment">// 读取编码器的值</span></span><br><span class="line">    encoder.motorSpeed = GetMotorSpeed(run_time);  <span class="comment">// 计算电机当前速度</span></span><br><span class="line">    motor.distance += GetMotorDistance(run_time);  <span class="comment">// 获取电机距离</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 电机 pid 程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MotorPid</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">float</span> err, last_err, expect_pwm;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请根据实际情况修改 KP、KI 参数大小</span></span><br><span class="line">    motor_pid.kp = <span class="number">0.1</span>;</span><br><span class="line">    motor_pid.ki = <span class="number">0.2</span>;</span><br><span class="line"></span><br><span class="line">    err = motor.expectSpeed - encoder.motorSpeed;</span><br><span class="line">    expect_pwm += motor_pid.kp * (err - last_err) + motor_pid.ki * err;</span><br><span class="line">    last_err = err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 电机占空比限幅</span></span><br><span class="line">    <span class="comment">// 请根据实际情况修改最大和最小 PWM 参数值</span></span><br><span class="line">    <span class="keyword">if</span> (expect_pwm &gt; <span class="number">260</span>) expect_pwm = <span class="number">260</span>;</span><br><span class="line">    <span class="keyword">if</span> (expect_pwm &lt;= <span class="number">0</span>) expect_pwm = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将值转换为正整数类型</span></span><br><span class="line">    motor.expectDutyRatio = (uint16)(expect_pwm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 电机控制程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MotorControl</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    MotorPid();</span><br><span class="line">    MotorPWM(<span class="number">0</span>, motor.expectDutyRatio);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;仅用于备份本人所写笔记，如有错误或不完善之处还请包含。转载请注明出处！&lt;/p&gt;
&lt;p&gt;程序使用逐飞科技 K60 库 V2.0.3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;电机速度闭环控制，简单来说就是将电机的输出量（速度）通过编码器反馈到控制端（
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://zhangxiaocn.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="K60" scheme="https://zhangxiaocn.github.io/tags/K60/"/>
    
  </entry>
  
  <entry>
    <title>IAR 软件自用技巧</title>
    <link href="https://zhangxiaocn.github.io/2019/10/29/iar-setting/"/>
    <id>https://zhangxiaocn.github.io/2019/10/29/iar-setting/</id>
    <published>2019-10-29T13:35:35.000Z</published>
    <updated>2019-10-29T13:44:47.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="更改背景"><a class="markdownIt-Anchor" href="#更改背景"></a> 更改背景</h1><p>效果如下：<br /><img src="https://i.loli.net/2018/11/14/5bebfef12b87e.png" alt="IAR主题效果" /></p><ol><li>点击 <code>Tools</code> -&gt; <code>options</code></li><li>选择 <code>Editor</code> -&gt; <code>Colors and Fonts</code></li><li>点击 <code>Font</code>，选择文字为 <code>Consolas</code> ，<code>Size</code> 选择 <code>三号</code>（按照自己的喜好设置大小）</li><li><code>Syntax Coloring</code> 一栏中设置如下：</li></ol><table><thead><tr><th style="text-align:center">type</th><th style="text-align:center">Color（颜色）</th><th style="text-align:center">Type Style（类型风格）</th><th style="text-align:center">Background Color（背景颜色）</th></tr></thead><tbody><tr><td style="text-align:center">Default</td><td style="text-align:center">White</td><td style="text-align:center">Normal</td><td style="text-align:center">Black</td></tr><tr><td style="text-align:center">C Keyword</td><td style="text-align:center">Lime</td><td style="text-align:center">Bold</td><td style="text-align:center">Black</td></tr><tr><td style="text-align:center">Strings</td><td style="text-align:center">Yellow</td><td style="text-align:center">Normal</td><td style="text-align:center">Black</td></tr><tr><td style="text-align:center">Char</td><td style="text-align:center">Aqua</td><td style="text-align:center">Normal</td><td style="text-align:center">Black</td></tr><tr><td style="text-align:center">Preprocessor</td><td style="text-align:center">Silver</td><td style="text-align:center">Normal</td><td style="text-align:center">Black</td></tr><tr><td style="text-align:center">Number</td><td style="text-align:center">Yellow</td><td style="text-align:center">Normal</td><td style="text-align:center">Black</td></tr><tr><td style="text-align:center">C++ Comment</td><td style="text-align:center">Aqua</td><td style="text-align:center">Italic</td><td style="text-align:center">Black</td></tr><tr><td style="text-align:center">comment</td><td style="text-align:center">Aqua</td><td style="text-align:center">Italic</td><td style="text-align:center">Black</td></tr><tr><td style="text-align:center">User Keyword</td><td style="text-align:center">Aqua</td><td style="text-align:center">Italic</td><td style="text-align:center">Black</td></tr><tr><td style="text-align:center">Compiler keyword</td><td style="text-align:center">Aqua</td><td style="text-align:center">Italic</td><td style="text-align:center">Black</td></tr><tr><td style="text-align:center">Asm keyword</td><td style="text-align:center">Fuchsia</td><td style="text-align:center">Bold</td><td style="text-align:center">Black</td></tr><tr><td style="text-align:center">Asm comment</td><td style="text-align:center">Lime</td><td style="text-align:center">Italic</td><td style="text-align:center">Black</td></tr></tbody></table><h1 id="解决函数无法跳转问题"><a class="markdownIt-Anchor" href="#解决函数无法跳转问题"></a> 解决函数无法跳转问题</h1><ol><li>点击 <code>Tools</code> -&gt; <code>options</code></li><li>选择 <code>Project</code></li><li>关闭 <code>Generate browse information</code> ，点击确定</li><li>再次进入设置并重复以上步骤，把刚才关闭的 <code>Generate browse information</code> 选项打开，点击确定</li><li>在软件左侧 <code>Workspace</code> 中，右键第一个文件，点击 <code>Rebuild All</code> ，等待右下角绿色进度条走完</li></ol><h1 id="打开软件左侧-workspace"><a class="markdownIt-Anchor" href="#打开软件左侧-workspace"></a> 打开软件左侧 Workspace</h1><ol><li>点击 <code>View</code> -&gt; <code>Workspace</code>即可</li></ol><blockquote><p>软件缺少任何视图都可以在 <code>View</code> 栏中找到并打开</p></blockquote><h1 id="用山外调试助手烧录-k60-程序错误问题"><a class="markdownIt-Anchor" href="#用山外调试助手烧录-k60-程序错误问题"></a> 用山外调试助手烧录 K60 程序错误问题</h1><ol><li>在软件左侧 <code>Workspace</code> 中找到 <code>Files</code> 里的第一个文件并右击鼠标，选择 <code>Options</code></li><li>选择 <code>General Options</code> 中，把 <code>Device</code> 改为 <code>NXP MK60FX512xxx15</code></li><li>选择 <code>Debugger</code> ，在 <code>Setup</code> 中把 <code>Driver</code> 改为 <code>CMSIS DAP</code> ，在 <code>Download</code> 中把框中的文字改为 <code>$TOOLKIT_DIR$\config\flashloader\NXP\FlashK60Fxxx128K.board</code></li><li>选择 <code>CMSIS DAP</code> ，在 <code>interface</code> 栏中把 <code>JTAG</code> 改为 <code>SWD</code></li></ol><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;更改背景&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#更改背景&quot;&gt;&lt;/a&gt; 更改背景&lt;/h1&gt;
&lt;p&gt;效果如下：&lt;br /&gt;
&lt;img src=&quot;https://i.loli.net/2018/11/14/5bebfef12b87e.
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://zhangxiaocn.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="IAR" scheme="https://zhangxiaocn.github.io/tags/IAR/"/>
    
      <category term="开发软件" scheme="https://zhangxiaocn.github.io/tags/%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>换电脑后快速恢复 hexo 博客</title>
    <link href="https://zhangxiaocn.github.io/2019/10/29/continue-blog/"/>
    <id>https://zhangxiaocn.github.io/2019/10/29/continue-blog/</id>
    <published>2019-10-29T13:23:54.000Z</published>
    <updated>2019-10-29T13:32:03.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>使用 Github + hexo 搭建一个个人博客是需要花不少时间的，搭建好后如果有一天电脑突然坏了，或者重装了系统，那么我们怎么使用 hexo 再发布文章到个人博客呢？其实方法还是有的！</p><h1 id="操作方法"><a class="markdownIt-Anchor" href="#操作方法"></a> 操作方法</h1><h2 id="安装软件"><a class="markdownIt-Anchor" href="#安装软件"></a> 安装软件</h2><ul><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">安装 Git 客户端</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">安装 node JS</a>：建议下载 LTS 长期支持版</li></ul><h2 id="在-github-官网添加新电脑的密钥"><a class="markdownIt-Anchor" href="#在-github-官网添加新电脑的密钥"></a> 在 github 官网添加新电脑的密钥</h2><p>在本地创建 SSH Keys：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;@邮箱&quot;</span><br></pre></td></tr></table></figure><p>一路回车。</p><p>进入 <code>C:\Users\用户名.ssh</code>，打开 <code>id_rsa.pub</code> 文件，复制里面所有的内容，然后进入 github 页面，点击右上角的 <code>头像 &gt; Settings</code> ，在左侧找到 <code>SSH and GPG keys</code>。<br />点击 <code>New SSH key</code> ，<code>Title</code> 里的内容可以自定义，<code>Key</code> 里填入复制的内容。点击 <code>add key</code>。</p><p>返回窗口，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>若弹出 <code>Are you sure you want to continue connecting (yes/no)?</code> 时输入 <code>yes</code> 确认。</p><p>接着出现 <code>Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.</code> 则操作成功。</p><h2 id="复制源文件到新电脑"><a class="markdownIt-Anchor" href="#复制源文件到新电脑"></a> 复制源文件到新电脑</h2><p>将你原来电脑上个人博客目录下必要文件拷到你的新电脑上（比如 <code>E:/Blog</code> 目录下），注意无需拷全部，只拷如下几个目录：</p><ul><li>_config.yml</li><li>package.json</li><li>scaffolds/</li><li>source/</li><li>themes/</li></ul><h2 id="安装-hexo"><a class="markdownIt-Anchor" href="#安装-hexo"></a> 安装 Hexo</h2><p>在命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>进入 <code>E:/Blog</code> 目录（新电脑的博客目录），输入下面指令安装相关模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save  // 文章部署到 git 的模块</span><br><span class="line">（下面为选择安装）</span><br><span class="line">npm install hexo-generator-feed --save  // 建立 RSS 订阅</span><br><span class="line">npm install hexo-generator-sitemap --save // 建立站点地图</span><br></pre></td></tr></table></figure><h2 id="测试是否成功"><a class="markdownIt-Anchor" href="#测试是否成功"></a> 测试是否成功</h2><p>命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   // 清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g       // 生成静态网页</span><br><span class="line">hexo s       // 启动服务器</span><br></pre></td></tr></table></figure><p>访问网址： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p>若能正常显示则成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;使用 Github + hexo 搭建一个个人博客是需要花不少时间的，搭建好后如果有一天电脑突然坏了，或者重装了系统，那么我们怎么使用 hexo
      
    
    </summary>
    
    
      <category term="Blog" scheme="https://zhangxiaocn.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zhangxiaocn.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="https://zhangxiaocn.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo NexT 主题的启用及设置</title>
    <link href="https://zhangxiaocn.github.io/2019/10/29/hexo-theme-next/"/>
    <id>https://zhangxiaocn.github.io/2019/10/29/hexo-theme-next/</id>
    <published>2019-10-29T13:05:08.000Z</published>
    <updated>2019-10-29T13:25:47.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主题的启用"><a class="markdownIt-Anchor" href="#主题的启用"></a> 主题的启用</h1><h2 id="下载并启用"><a class="markdownIt-Anchor" href="#下载并启用"></a> 下载并启用</h2><p>进入命令行，下载 NexT 主题，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>修改站点配置文件 <code>_config.yml</code>，找到如下代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br></pre></td></tr></table></figure><p>将 <code>landscape</code> 修改为 <code>next</code> 即可。</p><h2 id="修改语言"><a class="markdownIt-Anchor" href="#修改语言"></a> 修改语言</h2><p>打开站点配置文件，搜索 <code>language</code>，找到如下代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">author:</span></span><br><span class="line"><span class="attr">language:</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure><p>在 <code>language</code> 后面输入 <code>zh-CN</code>。</p><p>注意：冒号后面必须有一个空格。</p><h1 id="主题的设置"><a class="markdownIt-Anchor" href="#主题的设置"></a> 主题的设置</h1><h2 id="新建标签及分类界面"><a class="markdownIt-Anchor" href="#新建标签及分类界面"></a> 新建标签及分类界面</h2><p>打开 <code>主题配置文件</code>，搜索 <code>menu</code>，找到如下代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="comment">#tags: /tags/ || tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><p>把 <code>tags</code> 和 <code>categories</code> 前面的 <code>#</code> 删除，进入命令行，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo n page tags</span><br><span class="line">hexo n page categories</span><br></pre></td></tr></table></figure><p>进入博客主目录 <code>Hexo/source</code>，找到 <code>tags</code> 和 <code>categories</code> 文件夹，分别进入并修改文件夹内的文件。例如，先进入 <code>tags</code> 文件夹，打开 <code>index.md</code> 文件，在 <code>date</code> 下一行输入：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type: "tags"</span><br></pre></td></tr></table></figure><p>修改 <code>categories</code> 文件夹下的文件时，只需把上面的 <code>tags</code> 代码改成 <code>categories</code> 即可。</p><h2 id="切换主题"><a class="markdownIt-Anchor" href="#切换主题"></a> 切换主题</h2><p>next 主题自带四种样式。</p><p>在主题配置文件 <code>/next/_config.yml</code> 中查找：<code>scheme</code>，找到如下代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure><p>选择你喜欢的一种样式，去掉前面的 <code>#</code>，其他主题前加上 <code>#</code> 即可。</p><h2 id="隐藏网页底部-powered-by-hexo-强力驱动"><a class="markdownIt-Anchor" href="#隐藏网页底部-powered-by-hexo-强力驱动"></a> 隐藏网页底部 powered By Hexo / 强力驱动</h2><p>打开 <code>themes/next/layout/_partials/footer.swig</code></p><p>找到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.footer.powered.enable %&#125;</span><br><span class="line">  &lt;div class=&quot;powered-by&quot;&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; __(&apos;footer.powered&apos;, &apos;&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot;&apos; + nofollow + &apos; href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;&apos;) &#125;&#125;&#123;% if theme.footer.powered.version %&#125; v&#123;&#123; hexo_env(&apos;version&apos;) &#125;&#125;&#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.footer.powered.enable and theme.footer.theme.enable %&#125;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.footer.theme.enable %&#125;</span><br><span class="line">  &lt;div class=&quot;theme-info&quot;&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; __(&apos;footer.theme&apos;) &#125;&#125; – &#123;#</span><br><span class="line">  #&#125;&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot;&#123;&#123; nofollow &#125;&#125; href=&quot;https://theme-next.org&quot;&gt;&#123;#</span><br><span class="line">    #&#125;NexT.&#123;&#123; theme.scheme &#125;&#125;&#123;#</span><br><span class="line">  #&#125;&lt;/a&gt;&#123;% if theme.footer.theme.version %&#125; v&#123;&#123; version &#125;&#125;&#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>把这段代码首尾分别加上：<code>&lt;!--</code> 和 <code>--&gt;</code>，或者直接删除。</p><h2 id="文章添加阴影"><a class="markdownIt-Anchor" href="#文章添加阴影"></a> 文章添加阴影</h2><p>打开 <code>/themes/next/source/css/_custom/custom.styl</code>，添加：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="浏览页面显示当前浏览进度"><a class="markdownIt-Anchor" href="#浏览页面显示当前浏览进度"></a> 浏览页面显示当前浏览进度</h2><p>打开 <code>themes/next/_config.yml</code>，搜索关键字 <code>scrollpercent</code>，把 <code>false</code> 改为 <code>true</code>。</p><h2 id="local-search本地搜索"><a class="markdownIt-Anchor" href="#local-search本地搜索"></a> Local Search本地搜索</h2><p>在站点的根目录下执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>编辑站点配置文件，新增以下内容到任意位置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>编辑主题配置文件，启用本地搜索功能：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="设置个人头像"><a class="markdownIt-Anchor" href="#设置个人头像"></a> 设置个人头像</h2><p>打开 <code>主题配置文件</code>，找到 <code>Sidebar Avatar</code> 字段：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># in theme directory(source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># in site  directory(source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line"><span class="attr">  url:</span> <span class="comment">#/images/avatar.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line"><span class="attr">  rounded:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span></span><br><span class="line"><span class="attr">  opacity:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line"><span class="attr">  rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>将 <code>url</code> 后面的 <code>#</code> 删掉，然后把你的头像命名为 <code>avatar.jpg</code> 放入 <code>themes/next/source/images</code> 中</p><blockquote><p><code>rounded</code> ：设置头像为圆形</p><p><code>opacity</code> ：设置头像的不透明度</p><p><code>rotated</code> ：设置头像可旋转</p></blockquote><h2 id="设置站点建立时间"><a class="markdownIt-Anchor" href="#设置站点建立时间"></a> 设置站点建立时间</h2><p>在 <code>主题配置文件</code> 中，搜索：<code>since</code>，修改 <code>since</code> 后面的值即可，例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">since:</span> <span class="number">2013</span></span><br></pre></td></tr></table></figure><h2 id="设置网站图标"><a class="markdownIt-Anchor" href="#设置网站图标"></a> 设置网站图标</h2><p>在 <a href="http://www.easyicon.net/" target="_blank" rel="noopener">EasyIcon</a> 中找一张（32*32）的 ico 图标，或者去别的网站下载或者制作，并将图标名称改为<code>favicon.ico</code>，然后把图标放在 <code>/themes/next/source/images</code> 里，并且修改主题配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Put your favicon.ico into `hexo-site/source/` directory.</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/favicon.ico</span></span><br></pre></td></tr></table></figure><h2 id="修改文章底部的-号的标签"><a class="markdownIt-Anchor" href="#修改文章底部的-号的标签"></a> 修改文章底部的 # 号的标签</h2><p>修改模板 <code>/themes/next/layout/_macro/post.swig</code></p><p>搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 <code>#</code> 换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h2 id="网站底部字数统计"><a class="markdownIt-Anchor" href="#网站底部字数统计"></a> 网站底部字数统计</h2><p>切换到根目录下，运行如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>然后在 <code>/themes/next/layout/_partials/footer.swig</code> 文件尾部加上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"theme-info"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>博客全站共&#123;&#123; totalcount(site) &#125;&#125;字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加点击爱心效果"><a class="markdownIt-Anchor" href="#添加点击爱心效果"></a> 添加点击爱心效果</h2><p>在 <code>/themes/next/source/js/src</code> 下新建文件 <code>clicklove.js</code>，接着把如下代码复制粘贴到 <code>clicklove.js</code> 文件中，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><p>在 <code>\themes\next\layout\_layout.swig</code> 文件末尾添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/clicklove.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="点击爆炸效果"><a class="markdownIt-Anchor" href="#点击爆炸效果"></a> 点击爆炸效果</h2><p>方法和那个点击出现爱心效果是差不多的，首先在 <code>themes/next/source/js/src</code> 里面建一个叫 <code>fireworks.js</code> 的文件，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure><p>打开 <code>themes/next/layout/_layout.swig</code>，在 <code>&lt;/body&gt;</code> 上面写下如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.fireworks %&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"fireworks"</span> <span class="attr">style</span>=<span class="string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/fireworks.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>打开主题配置文件，在里面最后写下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Fireworks</span></span><br><span class="line"><span class="attr">fireworks:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="动态背景"><a class="markdownIt-Anchor" href="#动态背景"></a> 动态背景</h2><h3 id="next-主题在-511-以上"><a class="markdownIt-Anchor" href="#next-主题在-511-以上"></a> next 主题在 5.1.1 以上</h3><p>打开 <code>next/layout/_layout.swig</code>文件</p><p>在 <code>&lt;/body&gt;</code> 之前添加如下代码，不要放在 <code>&lt;/head&gt;</code> 的后面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></span><br><span class="line"><span class="tag"><span class="attr">color</span>=<span class="string">"0,0,255"</span> <span class="attr">opacity</span>=<span class="string">'0.7'</span> <span class="attr">zIndex</span>=<span class="string">"-2"</span> <span class="attr">count</span>=<span class="string">"99"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>打开主题配置文件 <code>/next/_config.yml</code></p><p>搜素 <code>canvas_nest</code>，将 <code>false</code> 改为 <code>true</code> 即可。</p><h3 id="next-主题在-511-以下"><a class="markdownIt-Anchor" href="#next-主题在-511-以下"></a> next 主题在 5.1.1 以下</h3><p>打开 <code>next/layout/_layout.swig</code> 文件</p><p>在 <code>&lt;/body&gt;</code> 之前添加如下代码，不要放在 <code>&lt;/head&gt;</code> 的后面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></span><br><span class="line"><span class="tag"><span class="attr">color</span>=<span class="string">"0,0,255"</span> <span class="attr">opacity</span>=<span class="string">'0.7'</span> <span class="attr">zIndex</span>=<span class="string">"-2"</span> <span class="attr">count</span>=<span class="string">"99"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>打开主题配置文件 <code>/next/_config.yml</code></p><p>在里面添加如下代码：(可以放在最后面)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># background settings</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># add canvas-nest effect</span></span><br><span class="line"><span class="comment"># see detail from https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="配置项说明"><a class="markdownIt-Anchor" href="#配置项说明"></a> 配置项说明</h3><ul><li><code>color</code>：线条颜色, 默认: ‘0,0,0’；三个数字分别为 (R,G,B)</li><li><code>opacity</code>: 线条透明度（0~1）, 默认: 0.5</li><li><code>count</code>: 线条的总数量, 默认: 150</li><li><code>zIndex</code>: 背景的 z-index 属性，css 属性用于控制所在层的位置, 默认: -1</li></ul><h2 id="修改文章不透明度"><a class="markdownIt-Anchor" href="#修改文章不透明度"></a> 修改文章不透明度</h2><p>设置了动态背景后，动态线条会干扰到文章的阅读，所以就需要调整文章背景的不透明度了。</p><p>修改 <code>themes\next\source\css\ _custom\custom.styl</code> 文件，在后面添加如下代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main-inner</span> &#123; </span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置项说明-2"><a class="markdownIt-Anchor" href="#配置项说明-2"></a> 配置项说明</h3><p><code>background</code>: #fff; 白色<br /><code>opacity</code>: 0.8; 不透明度</p><h2 id="自动更换背景图片"><a class="markdownIt-Anchor" href="#自动更换背景图片"></a> 自动更换背景图片</h2><p>和修改动态背景类似。</p><p>自动更换背景是修改添加背景的 css 样式来实现。图片来源是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://source.unsplash.com/</span><br></pre></td></tr></table></figure><blockquote><p>这个网站不仅免费提供了很多高清美图，而且还提供 api 接口调用，非常良心。这里实现的原理也是调用了这个网站的接口。</p></blockquote><p>修改 <code>themes\next\source\css\ _custom\custom.styl</code> 文件，添加以下代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    background:url(https://source.unsplash.com/random/1600x900);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果不喜欢这个网址提供的图片做背景，可以修改<code>url()</code>里面的路径。<code>repeat</code>、<code>attachment</code>、<code>position</code>就是调整图片的位置、不重复出现、不滚动等等。</p></blockquote><h2 id="静态背景"><a class="markdownIt-Anchor" href="#静态背景"></a> 静态背景</h2><p>打开博客根目录 <code>/themes/next/source/css/_custom/custom.styl</code> 文件，编辑如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line"><span class="selector-tag">body</span> &#123; </span><br><span class="line">    background-image: url(/images/background.png);</span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed; <span class="comment">// 不随屏幕滚动而滚动</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: repeat; <span class="comment">// 如果背景图不够屏幕大小则重复铺，改为no-repeat则表示不重复铺</span></span><br><span class="line">    <span class="attribute">background-size</span>: contain; <span class="comment">// 等比例铺满屏幕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将背景图命名为 <code>background.png</code> 并放入主题根目录 <code>source/images</code> 下。</p><h2 id="修改主题颜色"><a class="markdownIt-Anchor" href="#修改主题颜色"></a> 修改主题颜色</h2><p>找到 <code>博客根目录\themes\next\source\css\_custom\custom.styl</code> 并打开</p><p>如下列出了蓝色主题的参考代码，可以直接使用：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文章内链接文本样式 </span></span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> a&#123; </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0593d3</span>; </span><br><span class="line">    <span class="attribute">border-bottom</span>: none; </span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>; </span><br><span class="line">    &amp;:hover &#123; </span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#fc6423</span>; </span><br><span class="line">        <span class="attribute">border-bottom</span>: none; </span><br><span class="line">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fc6423</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改选中字符的颜色</span></span><br><span class="line"><span class="comment">/* webkit, opera, IE9 */</span></span><br><span class="line">::selection &#123; </span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* firefox */</span></span><br><span class="line">::-moz-selection &#123; </span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改网站头部颜色</span></span><br><span class="line"><span class="selector-class">.headband</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.site-meta</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.site-subtitle</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改按键（button）样式</span></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#49b1f5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按键（button）点击时样式</span></span><br><span class="line"><span class="selector-class">.btn</span>:hover &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标移动至文章标题时的效果</span></span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-title-link</span>::before &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: scaleX(<span class="number">0</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: scaleX(<span class="number">0</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: scaleX(<span class="number">0</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: scaleX(<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">transform</span>: scaleX(<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">transition-duration</span>: <span class="number">0.2s</span>;</span><br><span class="line">    <span class="attribute">transition-timing-function</span>: ease-in-out;</span><br><span class="line">    <span class="attribute">transition-delay</span>: <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;主题的启用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#主题的启用&quot;&gt;&lt;/a&gt; 主题的启用&lt;/h1&gt;
&lt;h2 id=&quot;下载并启用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#下载并启用&quot;&gt;&lt;/a&gt; 下载并
      
    
    </summary>
    
    
      <category term="Blog" scheme="https://zhangxiaocn.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zhangxiaocn.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="https://zhangxiaocn.github.io/tags/Hexo/"/>
    
      <category term="美化" scheme="https://zhangxiaocn.github.io/tags/%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>我初学 C 的代码保留</title>
    <link href="https://zhangxiaocn.github.io/2019/10/27/my-c-memory/"/>
    <id>https://zhangxiaocn.github.io/2019/10/27/my-c-memory/</id>
    <published>2019-10-27T13:23:55.000Z</published>
    <updated>2019-10-29T13:26:24.407Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容为本人初学 C 的时候所写的部分代码，有些程序现在看起来写的真的很烂哈哈，但是舍不得删除呐，最后还是将它们保留了下来。。。这算不算是松鼠症？？</p><h1 id="求和问题"><a class="markdownIt-Anchor" href="#求和问题"></a> 求和问题</h1><p>求 1 + 2! + 3! + … + 20! 的和：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> a = <span class="number">1</span>, b = <span class="number">0</span>, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">        a = a * i;</span><br><span class="line">        b = b + a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1 + 2! + 3! ... + 20! = %.0f\n"</span>, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求 1 + 2 + … + 100 的和：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b = <span class="number">0</span>;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">loop:</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        b = b + a;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="keyword">goto</span> loop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1 + 2 + ... + 100 的和为：%d\n"</span>, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13 … 求出这个数列的前 20 项之和：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">float</span> a = <span class="number">2</span>, b = <span class="number">1</span>, c = <span class="number">0</span>, d;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">        c = a / b + c;</span><br><span class="line">        d = a;</span><br><span class="line">        a = a + b;</span><br><span class="line">        b = d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"这个数列的前20项之和为：%f\n"</span>, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求序列 S = 2/1 + 3/2 + 5/3 + 8/5 + 13/8 + …… 前 n 项和：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> S = <span class="number">0</span>, s1 = <span class="number">2</span>, s2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> a, n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入 n 的值："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; n; a++) &#123;</span><br><span class="line">        S = (s1 / s2) + S;</span><br><span class="line">        s2 = s1;</span><br><span class="line">        s1 = (<span class="number">2</span> * s1) - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"S = 2/1 + 3/2 + 5/3 + 8/5 + 13/8 + …… 前 n 项和为：%f"</span>, S);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求 1 到 100 之间的奇数之和，偶数之和：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">            sum1 += i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sum2 += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1~100 的奇数和为：%d\n"</span>, sum1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1~100 的偶数和为：%d\n"</span>, sum2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阶乘问题"><a class="markdownIt-Anchor" href="#阶乘问题"></a> 阶乘问题</h1><p>求 n 的阶乘 n!：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, s = <span class="number">1</span>, n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入需要求阶乘的数字："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        s = s * i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i &lt;= n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d! = %d\n"</span>, n, s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, s, n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入需要求阶乘的数字："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>, s = <span class="number">1</span>; i &lt;= n; i++) s = s * i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d! = %d\n"</span>, n, s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, s = <span class="number">1</span>, n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入需要求阶乘的数字："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= n) &#123;  <span class="comment">// 一直算到 i &gt; n 时循环结束，输出</span></span><br><span class="line">        s = s * i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d! = %d\n"</span>, n, s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="素数问题"><a class="markdownIt-Anchor" href="#素数问题"></a> 素数问题</h1><p>判断输入的数字是否为素数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prime_number</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, i;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入一个整数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            a++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d 是素数\n"</span>, n);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d 不是素数\n"</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求出 100~200 之间的所有素数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prime_number</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, i, a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"100~200 之间的所有素数为："</span>);</span><br><span class="line">    <span class="keyword">for</span> (m = <span class="number">101</span>; m &lt;= <span class="number">200</span>; m++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m % i == <span class="number">0</span>) a++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%-4d"</span>, m);</span><br><span class="line">            b++;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            a = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n这些素数一共有 %d 个"</span>, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求 100~300 之间所有素数之和：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prime_number</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, i, a = <span class="number">0</span>, b = <span class="number">0</span>, c, d = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"100 ~ 300之间所有素数之和为："</span>);</span><br><span class="line">    <span class="keyword">for</span> (m = <span class="number">101</span>; m &lt;= <span class="number">300</span>; m++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m % i == <span class="number">0</span>) a++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">            c = m;</span><br><span class="line">            d = c + d;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            a = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个程序，从键盘输入一个整数，输出大于且紧随该整数的素数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prime_number</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, i, n, m;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入一个整数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    m = n + <span class="number">1</span>;</span><br><span class="line">A:</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m % i == <span class="number">0</span>) &#123;</span><br><span class="line">            a++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"大于且最接近输入的数的素数是：%d\n"</span>, m);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        m = m + <span class="number">1</span>;</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">goto</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prime_number</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, m, c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        m++;</span><br><span class="line">        c = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m % i == <span class="number">0</span>) &#123;</span><br><span class="line">                c = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="排序问题"><a class="markdownIt-Anchor" href="#排序问题"></a> 排序问题</h1><p>从键盘输入 10 个整数，编程求出其中的最大值和最小值，并输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sort</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max, min, m[<span class="number">10</span>], i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输出10个数："</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m[i]);  <span class="comment">// 输入 10 个数字，保存到 m[i] 中</span></span><br><span class="line">    max = min = m[<span class="number">0</span>];        <span class="comment">// 定义最值</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (max &lt; m[i])  <span class="comment">// m[i] 依次与最值比较，得出最大值 max</span></span><br><span class="line">            max = m[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (min &gt; m[i])  <span class="comment">// m[i] 依次与最值比较，得出最小值 min</span></span><br><span class="line">            min = m[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最大值 = %d\n最小值 = %d"</span>, max, min);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将输入的五个整数按照从小到大顺序排列：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sort</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> i, j, t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入5个数："</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)          <span class="comment">// 进行 4 次循环，实现 4 趟比较</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span> - j; i++)  <span class="comment">// 在每一趟比较中进行 4－1 次比较</span></span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>])     <span class="comment">// 相邻两个数比较</span></span><br><span class="line">            &#123;</span><br><span class="line">                t = a[i];</span><br><span class="line">                a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">                a[i + <span class="number">1</span>] = t;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"排序后的数据为："</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="输出图像"><a class="markdownIt-Anchor" href="#输出图像"></a> 输出图像</h1><p>输出一个菱形：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">diamond</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; <span class="number">4</span>; a++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (b = <span class="number">0</span>; b &lt;= <span class="number">2</span> - a; b++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (c = <span class="number">0</span>; c &lt;= <span class="number">2</span> * a; c++) <span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt;= <span class="number">2</span>; a++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (b = <span class="number">0</span>; b &lt;= a; b++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (c = <span class="number">0</span>; c &lt;= <span class="number">4</span> - <span class="number">2</span> * a; c++) <span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出一个行数可调的菱形：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">diamond</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);  <span class="comment">// 输入一个 n，则输出 2*n+1 行</span></span><br><span class="line">    <span class="keyword">for</span> (i = -n; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="built_in">abs</span>(i); j++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">2</span> * n + <span class="number">1</span> - <span class="number">2</span> * <span class="built_in">abs</span>(i); j++) <span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出空心菱形：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">diamond</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, line, m;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入行数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line);</span><br><span class="line">    m = (line + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; m - i; k++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2</span> * i - <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = m - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; m - i; k++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2</span> * i - <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出一个正方形中的空心菱形（行数可控）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">diamond</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入这个空心菱形的行数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = -(n / <span class="number">2</span>); i &lt;= n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == -(n / <span class="number">2</span>) || i == (n / <span class="number">2</span>)) &#123;  <span class="comment">//第一行和最后一行</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="built_in">abs</span>(i) + <span class="number">1</span>; j++) <span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= (n - <span class="number">2</span> * (<span class="built_in">abs</span>(i) + <span class="number">1</span>)); j++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="built_in">abs</span>(i) + <span class="number">1</span>; j++) <span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文字玩法"><a class="markdownIt-Anchor" href="#文字玩法"></a> 文字玩法</h1><p>输入一个 5 位数，判断它是不是回文数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">palindrome</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;           <span class="comment">// 带输入的数</span></span><br><span class="line">    <span class="keyword">int</span> g, w, s, q;  <span class="comment">// 分别表示的是个位、万位、十位、千位</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入一个 5 位数："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">99999</span> || x &lt; <span class="number">10000</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"您输入的 %d 不是一个 5 位数\n"</span>, x);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        g = x % <span class="number">10</span>;</span><br><span class="line">        w = x / <span class="number">10000</span>;</span><br><span class="line">        s = (x % <span class="number">100</span>) / <span class="number">10</span>;</span><br><span class="line">        q = (x % <span class="number">10000</span>) / <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (g == w &amp;&amp; s == q)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d 是一个回文数\n"</span>, x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d 不是一个回文数\n"</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 9×9 口诀表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">table</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, result;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            result = i * j;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d*%d=%-3d"</span>, i, j, result);  <span class="comment">// -3d 表示左对齐，占 3 位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);  <span class="comment">// 每一行后换行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下内容为本人初学 C 的时候所写的部分代码，有些程序现在看起来写的真的很烂哈哈，但是舍不得删除呐，最后还是将它们保留了下来。。。这算不算是松鼠症？？&lt;/p&gt;
&lt;h1 id=&quot;求和问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#求和问题&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="C" scheme="https://zhangxiaocn.github.io/categories/C/"/>
    
    
      <category term="回忆" scheme="https://zhangxiaocn.github.io/tags/%E5%9B%9E%E5%BF%86/"/>
    
      <category term="C" scheme="https://zhangxiaocn.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hexo yilia 主题的启用及设置</title>
    <link href="https://zhangxiaocn.github.io/2019/10/25/hexo-theme-yilia/"/>
    <id>https://zhangxiaocn.github.io/2019/10/25/hexo-theme-yilia/</id>
    <published>2019-10-25T13:57:17.000Z</published>
    <updated>2019-10-29T13:26:09.400Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>yilia 主题作者已经不维护了，还有好多坑没有填完，在此记录一下</p><p>主题地址：<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia</a></p><p>本文章同步更新地址：<a href="https://www.cnblogs.com/zhangxiaochn/p/Hexo_Theme_Yilia.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangxiaochn/p/Hexo_Theme_Yilia.html</a></p></blockquote><h1 id="主题的启用"><a class="markdownIt-Anchor" href="#主题的启用"></a> 主题的启用</h1><h2 id="下载并启用"><a class="markdownIt-Anchor" href="#下载并启用"></a> 下载并启用</h2><p>进入命令行，下载 yilia 主题，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><p>修改站点配置文件 <code>_config.yml</code>，找到如下代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br></pre></td></tr></table></figure><p>将 <code>landscape</code> 修改为 <code>yilia</code> 即可。</p><h2 id="修改语言"><a class="markdownIt-Anchor" href="#修改语言"></a> 修改语言</h2><p>打开站点配置文件，搜索<code>language</code>，找到如下代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">author:</span></span><br><span class="line"><span class="attr">language:</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure><p>在 <code>language</code> 后面输入 <code>zh-CN</code>。</p><p>注意：冒号后面必须有一个空格。</p><h1 id="主题相关设置"><a class="markdownIt-Anchor" href="#主题相关设置"></a> 主题相关设置</h1><h2 id="所有文章按钮的安装"><a class="markdownIt-Anchor" href="#所有文章按钮的安装"></a> “所有文章”按钮的安装</h2><p>首先使用命令 <code>node -v</code> 检查版本是不是大于 6.2</p><p>在博客根目录执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-generator-json-content --save</span><br></pre></td></tr></table></figure><p>在博客配置文件 <code>_config.yml</code> 最下面加上：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line"><span class="attr">  meta:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  pages:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    title:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    date:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    path:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    text:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    raw:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    content:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    slug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    updated:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    permalink:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    excerpt:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    categories:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="添加图片资源文件夹"><a class="markdownIt-Anchor" href="#添加图片资源文件夹"></a> 添加图片资源文件夹</h2><p>路径为 <code>themes/yilia/source/</code> 下，可添加一个 <code>assets</code> 文件夹，里面存放图片资源即可</p><p>需要添加头像或者微信/支付宝二维码图片，直接引用即可。路径为 <code>themes/yilia/_config.yml</code> 。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 微信二维码图片</span></span><br><span class="line"><span class="attr">weixin:</span>  <span class="string">/assets/img/wechat.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 头像图片</span></span><br><span class="line"><span class="attr">avatar:</span>  <span class="string">/assets/img/head.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网页图标</span></span><br><span class="line"><span class="attr">favicon:</span>  <span class="string">/assets/img/head.jpg</span></span><br></pre></td></tr></table></figure><h2 id="文章显示摘要"><a class="markdownIt-Anchor" href="#文章显示摘要"></a> 文章显示摘要</h2><p>在你 MD 格式文章正文插入 <code>&lt;!-- more --&gt;</code> 即可，只会显示它之前的，此后的就不显示，点击文章标题，全文阅读才可看到，同时注释掉文件 <code>themes/yilia/_config.yml</code> 里的：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># excerpt_link: more</span></span><br></pre></td></tr></table></figure><h2 id="文章显示目录"><a class="markdownIt-Anchor" href="#文章显示目录"></a> 文章显示目录</h2><p>增加文章目录 TOC ( table of content )，方便阅读文章，在 <code>themes/yilia/_config.yml</code> 中进行配置 <code>toc: 2</code> 即可，它会将你 Markdown 语法的标题，生成目录，目录查看在右下角。</p><h2 id="增加归档菜单"><a class="markdownIt-Anchor" href="#增加归档菜单"></a> 增加归档菜单</h2><p>修改 <code>themes/yilia/_config.yml</code> 内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">    <span class="string">主页:</span>  <span class="string">/</span></span><br><span class="line">    <span class="string">归档:</span>  <span class="string">/archives/index.html</span></span><br></pre></td></tr></table></figure><h2 id="修复失效的微信分享二维码"><a class="markdownIt-Anchor" href="#修复失效的微信分享二维码"></a> 修复失效的微信分享二维码</h2><p>打开 <code>themes\yilia\layout\_partial\post\share.ejs</code> 文件</p><p>把第49行中的 <code>//pan.baidu.com/share/qrcode?url=</code> 修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//api.qrserver.com/v1/create-qr-code/?size=150x150&amp;data=</span><br></pre></td></tr></table></figure><h2 id="更改左侧昵称字体"><a class="markdownIt-Anchor" href="#更改左侧昵称字体"></a> 更改左侧昵称字体</h2><p>在 <code>themes\yilia\source\main.0cf68a.css</code> 文件里面修改，找到 <code>header-author</code> ，修改里面的 <code>font-family</code> ，改成：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span><span class="selector-pseudo">:"Times</span> <span class="selector-tag">New</span> <span class="selector-tag">Roman</span>",<span class="selector-tag">Georgia</span>,<span class="selector-tag">Serif</span></span><br></pre></td></tr></table></figure><h2 id="左侧显示总文章数"><a class="markdownIt-Anchor" href="#左侧显示总文章数"></a> 左侧显示总文章数</h2><p>打开 <code>themes\yilia\layout\_partial\left-col.ejs</code> 文件</p><p>在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav class=&quot;header-menu&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">    &lt;% for (var i in theme.menu)&#123; %&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;&lt;%- url_for(theme.menu[i]) %&gt;&quot;&gt;&lt;%= i %&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;%&#125;%&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/nav&gt;</span><br></pre></td></tr></table></figure><p>后面添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav&gt;</span><br><span class="line">    总文章数 &lt;%=site.posts.length%&gt;</span><br><span class="line">&lt;/nav&gt;</span><br></pre></td></tr></table></figure><h2 id="添加字数统计"><a class="markdownIt-Anchor" href="#添加字数统计"></a> 添加字数统计</h2><p>首先安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a></p><p>使用如下命令安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><blockquote><p>Node 版本7.6.0之前,请安装 2.x 版本 (Node.js v7.6.0 and previous)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount@2 --save</span><br></pre></td></tr></table></figure><p>然后在 <code>themes\yilia\layout\_partial\left-col.ejs</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav&gt;</span><br><span class="line">总字数 &lt;span class=&quot;post-count&quot;&gt;&lt;%= totalcount(site, &apos;0,0.0a&apos;) %&gt;&lt;/span&gt;</span><br><span class="line">&lt;/nav&gt;</span><br></pre></td></tr></table></figure><p>添加位置在如下代码的下面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav&gt;</span><br><span class="line">    总文章数 &lt;%=site.posts.length%&gt;</span><br><span class="line">&lt;/nav&gt;</span><br></pre></td></tr></table></figure><p>编辑 <code>themes\yilia\layout\_partial\article.ejs</code></p><p>在header下面加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=&quot;center&quot; class=&quot;post-count&quot;&gt;</span><br><span class="line">    字数：&lt;%= wordcount(post.content) %&gt;字 | 预计阅读时长：&lt;%= min2read(post.content) %&gt;分钟</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>即可显示单篇字数和预计阅读时长。</p><h2 id="添加来必力livere评论系统"><a class="markdownIt-Anchor" href="#添加来必力livere评论系统"></a> 添加来必力(livere)评论系统</h2><p>yilia 默认带了几个系统，但是没有来必力，所以可以自己加</p><p>首先是去注册来必力，然后获取到自己的 <code>id</code></p><p>新建 <code>themes\yilia\layout\_partial\comment\livere.ejs</code> 文件，输入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">&lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;&lt;%=theme.livere_uid%&gt;&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    (function(d, s) &#123;</span><br><span class="line">        var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line"></span><br><span class="line">        if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125;</span><br><span class="line"></span><br><span class="line">        j = d.createElement(s);</span><br><span class="line">        j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;;</span><br><span class="line">        j.async = true;</span><br><span class="line"></span><br><span class="line">        e.parentNode.insertBefore(j, e);</span><br><span class="line">    &#125;)(document, &apos;script&apos;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;noscript&gt;为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- City版安装代码已完成 --&gt;</span><br></pre></td></tr></table></figure><p>然后编辑 <code>themes\yilia\layout\_partial\article.ejs</code> 文件，找到：<code>&lt;% if (!index &amp;&amp; post.comments){ %&gt;</code> ，添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.livere)&#123; %&gt;</span><br><span class="line">&lt;%- partial(&apos;comment/livere&apos;, &#123;</span><br><span class="line">key: post.slug,</span><br><span class="line">title: post.title,</span><br><span class="line">url: config.url+url_for(post.path)</span><br><span class="line">&#125;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>在主题配置文件 <code>themes\yilia\_config.yml</code> 中添加以下内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">livere:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">livere_uid:</span> <span class="string">你的id</span></span><br></pre></td></tr></table></figure><h2 id="关闭信息收集自选"><a class="markdownIt-Anchor" href="#关闭信息收集自选"></a> 关闭信息收集（自选）</h2><p>关于访问 <code>litten.me:9005</code> 的问题，这个主题的作者之前为了更好地完善这个主题，有时候会收集用户的客户端信息，详情请见 <a href="https://github.com/litten/hexo-theme-yilia/issues/528" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia/issues/528</a> ，如果不想被统计，就将 <code>themes\yilia\source-src\js\report.js</code> 里面的内容清空。不过这个请求是异步的，不会影响博客加载速度，而且作者已经不维护了，所以关不关都行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;yilia 主题作者已经不维护了，还有好多坑没有填完，在此记录一下&lt;/p&gt;
&lt;p&gt;主题地址：&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
    
      <category term="Blog" scheme="https://zhangxiaocn.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zhangxiaocn.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="https://zhangxiaocn.github.io/tags/Hexo/"/>
    
      <category term="美化" scheme="https://zhangxiaocn.github.io/tags/%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github 创建个人博客</title>
    <link href="https://zhangxiaocn.github.io/2019/10/25/create-blog/"/>
    <id>https://zhangxiaocn.github.io/2019/10/25/create-blog/</id>
    <published>2019-10-25T11:54:41.000Z</published>
    <updated>2019-10-29T13:29:40.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装及配置"><a class="markdownIt-Anchor" href="#安装及配置"></a> 安装及配置</h1><p>首先安装如下软件，安装过程无脑点击下一步即可。</p><ul><li><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a></p></li><li><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>：建议下载 LTS 长期支持版</p></li></ul><p>安装完成后，在 cmd 里输入 <code>git version</code> 即可查看 git 当前版本。输入 <code>node -v</code> 即可查看 node.js 当前版本。</p><p>接下来，新建一个文件夹，创建的位置任选。该文件夹主要用来存放博客的所有文件。然后进入该文件夹（这里就是博客文件夹的根目录，后文很多地方会用到），右键选择 <code>Git Bash Here</code> 选项。</p><p>在弹出的窗口中，输入 <code>npm config set registry https://registry.npm.taobao.org</code> 切换为淘宝源，从而加快下载速度。</p><p>接着，输入 <code>npm i -g hexo</code> 安装 hexo。</p><p>安装完成后，在当前窗口中，输入 <code>hexo -v</code> 即可查看 hexo 当前版本。</p><p>然后，我们输入命令 <code>hexo init</code>，初始化 hexo ，完成后打开我们的博客文件夹，即可看到该文件夹里有很多的文件了，这些都是我们搭建博客所需要的文件。</p><h1 id="github-配置"><a class="markdownIt-Anchor" href="#github-配置"></a> github 配置</h1><p>首先进入 <a href="https://github.com/" target="_blank" rel="noopener">github</a> 官网，注册新账号，账号名称一定要想好了再填，不然你会后悔的。。。</p><p>注册成功后点击右上角的 New repository，在 Reposotory name 栏中填入 <code>yourname.github.io</code> （yourname 改为你账号的名称），然后点击 Create reposutory。</p><p>接着我们回到博客文件夹的根目录，右键选择 <code>Git Bash Here</code> 选项，配置 github 账户的信息，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>命令中的 yourname 和 youremail 分别改为你的账户名以及你创建该账户的邮箱。</p><p>然后输入<code>cd ~/.ssh</code> 检查电脑中的 SSH Key，会出现提示： <code>No such file or directory</code> 。</p><p>接下来我们开始创建 SSH。回到博客文件夹的根目录，右键选择 <code>Git Bash Here</code> 选项，输入 <code>ssh-keygen -t rsa -C &quot;youremail@example.com</code>，将 <a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a> 改为你的账户邮箱。一路回车即可。</p><p>紧接着输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>将获取的 ssh 复制下来，打开 github 首页，点击页面右上角的头像，选择 Settings，在下面的选项中找到 SSH and GPG keys 。点击 New SSH key ，Title 里的内容可以自定义，Key 里粘贴刚才复制的内容。点击 add key。</p><p>返回到博客文件夹的根目录，右键选择 <code>Git Bash Here</code> 选项，输入 <code>ssh -T git@github.com</code> 。</p><p>若弹出 <code>Are you sure you want to continue connecting (yes/no)?</code>  时输入 <code>yes</code> 并回车。</p><p>接着出现 <code>Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.</code></p><p>则操作成功。</p><h1 id="博客配置"><a class="markdownIt-Anchor" href="#博客配置"></a> 博客配置</h1><p>打开你的博客文件夹，找到 <code>_config.yml</code> 文件并打开，在最后修改并添加如下代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>将 YourgithubName 改为你的 github 账号名。保存文件。</p><p>回到博客文件夹的根目录，右键选择 <code>Git Bash Here</code> 选项，分别执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>接着打开浏览器，在浏览器中输入 <code>http://localhost:4000</code> 即可看到你的本地博客了。</p><h1 id="博客上传"><a class="markdownIt-Anchor" href="#博客上传"></a> 博客上传</h1><p>在博客文件夹的根目录，右键选择 <code>Git Bash Here</code> 选项，输入 <code>npm install hexo-deployer-git --save</code> 安装部署到 github 的插件。</p><p>然后执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>中途可能会出现弹窗需要输入 github 账号和密码。输入完即可。</p><p>接下来等待十分钟左右，等待 github 将博客文件配置完成。</p><p>在浏览器中输入 <code>https://yourgithubname.github.io</code> （yourgithubname 为你的 github 账号名）即可看到你的个人博客了。</p><h1 id="创建文章"><a class="markdownIt-Anchor" href="#创建文章"></a> 创建文章</h1><p>博客搭建完成后，在博客文件夹的根目录，右键选择 <code>Git Bash Here</code> 选项，输入 <code>hexo n yourtitle</code> （yourtitle 改为你自定义的文章标题）即可创建文章，文章保存的路径在  <code>博客文件夹根目录/source/_posts</code> 文件夹中，文件格式为 markdown 格式，想要写文章的朋友可以自学 markdown 语法，然后就可以打开这个文件进行写作了。</p><p>写作完成后，进入你的博客文件夹根目录，右键选择 <code>Git Bash Here</code> 选项 ，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>即可上传到 github。</p><h1 id="绑定域名"><a class="markdownIt-Anchor" href="#绑定域名"></a> 绑定域名</h1><p>不需要更换域名的朋友可以跳过这一节。</p><p>GitHub Pages 支持使用自己的域名，喜欢个性化的朋友可以选择一个合适的域名绑定博客。</p><p>以下用阿里云举例。</p><p>首先购买一个域名，购买完成后，如果没有进行过实名认证的话，一定要进行实名认证，也就是域名状态那里。</p><p>进行实名认证后，进行域名解析。首先进入博客文件夹根目录，右键选择 <code>Git Bash Here</code> 选项，然后输入 <code>ping @yourname.github.io</code> ，得到 IP 并复制。</p><p>进入阿里云控制台，点击域名后面的 <code>解析</code>，添加如下记录：</p><table><thead><tr><th style="text-align:center">记录类型</th><th style="text-align:center">主机记录</th><th style="text-align:center">记录值</th><th style="text-align:center">TTL</th></tr></thead><tbody><tr><td style="text-align:center">CNAME</td><td style="text-align:center">@</td><td style="text-align:center"><a href="http://yourname.github.io" target="_blank" rel="noopener">yourname.github.io</a></td><td style="text-align:center">10分钟</td></tr><tr><td style="text-align:center">A</td><td style="text-align:center">www</td><td style="text-align:center">yourIP</td><td style="text-align:center">10分钟</td></tr></tbody></table><p>将 yourname 改为你的 github 账户名，将 yourIP 改为你刚才复制的 IP。其他保持默认即可。</p><p>进入 github，打开刚刚创建的仓库，打开 <code>Setting</code> ，找到  <code>Github pages</code> ，在 <code>Custom domain</code> 里输入你购买的域名，例如: <code>www.yourname.com</code> ( <code>www.</code> 可以不写 ) ，点击 <code>save</code> ，勾选下面的 <code>Enforce HTTPS</code> 选项。</p><p>进入博客文件夹根目录，找到 <code>source</code> ，在里面创建一个文本文档，输入你购买的域名，例如： <code>www.yourname.com</code> ( <code>www.</code> 可以不写 )，保存后重命名为 <code>CNAME</code> ，并将文件后缀名删除。</p><p>然后进入博客文件夹根目录，右键选择 <code>Git Bash Here</code> 选项，输入 <code>hexo d -g</code> 即可。等待 10 分钟左右时间便可以用新域名访问博客。</p><h1 id="hexo-常用指令"><a class="markdownIt-Anchor" href="#hexo-常用指令"></a> hexo 常用指令</h1><p>平常我们用到的指令如下：</p><ul><li><code>hexo clean</code>：清除缓存文件和已生成的静态文件。</li><li><code>hexo g</code>：生成静态文件。</li><li><code>hexo s</code>：启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 。</li><li><code>hexo d</code>：部署网站。</li><li><code>hexo v</code>：显示 Hexo 版本。</li></ul><p>可以进入<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">Hexo文档</a> 查看更多指令。</p><h1 id="博客配置文件详解"><a class="markdownIt-Anchor" href="#博客配置文件详解"></a> 博客配置文件详解</h1><blockquote><p>“配置文件” 为博客根目录的 <code>_config.yml</code> 文件</p><p>部分注释来自互联网</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"><span class="comment"># Site（标题等必填）</span></span><br><span class="line"><span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">title:</span></span><br><span class="line"><span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line"><span class="comment">#网站描述</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="comment">#作者昵称</span></span><br><span class="line"><span class="attr">author:</span></span><br><span class="line"><span class="comment">#网站语言，默认英语，设置简体中文</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="comment">#时区，默认电脑时区</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">#如果网站是放在子目录中，将url设置成'http://yoursite.com/child'，将root设置成'/child/'</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="comment">#网址（输入你的GitHub Pages地址）</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://用户名.github.io</span></span><br><span class="line"><span class="comment">#网站根目录。如果网站是放在子目录中，将root设置成'子目录名'</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="comment">#文章链接地址格式 。即文章存放的目录。（**注意**：为方便网络爬虫抓取博客信息，一般都会把网址设置成“三段”，而Hexo默认为“域名:年:月:日:标题”五段。强烈建议修改为**:year:month:day/:title/**以便于抓取。）</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year:month:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="comment">#资源文件夹，放在里面的文件会上传到github中</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="comment">#公共文件夹，存放生成的静态文件</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="comment">#标签文件夹，默认是tags。实际存放在source/tags中。</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">rss_dir:</span> <span class="string">rss</span></span><br><span class="line"><span class="comment">#档案文件夹，默认是archives。</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="comment">#分类文件夹，默认是categories。实际存放在source/categories中。</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="comment">#代码文件夹，默认是downloads/code</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="comment">#国际化文件夹，默认跟language相同</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="comment">#不需要渲染的文件夹或文件夹,格式为[文件名]</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="comment"># 新建博文（帖子）的默认名称</span></span><br><span class="line"><span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span></span><br><span class="line"><span class="comment">#默认布局模板是post，而不是draft和page</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="comment">#是否将标题转换成标题形式（首字母大写）</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="comment">#在新标签页面中打开网页</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="comment">#是否渲染草稿</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#启动 Asset 文件夹</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#把链接改为与根目录的相对位址</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#显示未来的文章</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#代码块的设置</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 使用代码高亮</span></span><br><span class="line"><span class="attr">line_number:</span> <span class="literal">true</span> <span class="comment"># 显示行号</span></span><br><span class="line"><span class="attr">auto_detect:</span> <span class="literal">true</span> <span class="comment"># 自动检测语言</span></span><br><span class="line"><span class="attr">tab_replace:</span></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">''</span></span><br><span class="line"><span class="comment">#每页文章数量</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="comment">#排序依据</span></span><br><span class="line"><span class="attr">order_by:</span> <span class="bullet">-date</span></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="comment">#默认分类</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="comment">#分类别名</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="comment">#标签别名</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">#Hexo 使用 Moment.js 来解析和显示时间。</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"><span class="comment"># Extensions 拓展插件配置</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">#主题配置</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="comment">#选择主题,默认为landscape</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"><span class="comment"># ---------------下面选项需要对应插件的支持---------------</span></span><br><span class="line"><span class="comment"># 部署配置</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">git@github.com:用户名/用户名.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="comment"># 配置RSS</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="comment">#feed 类型 (atom/rss2)</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line"><span class="comment">#rss 路径</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="comment">#在 rss 中最多生成的文章数(0显示所有)</span></span><br><span class="line"><span class="attr">limit:</span> <span class="number">0</span></span><br><span class="line"><span class="comment"># 自定义站点内容搜索</span></span><br><span class="line"><span class="comment"># 需要先安装插件：</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-search --save</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="comment"># 如只想索引文章，可设置为post</span></span><br><span class="line"><span class="attr">field:</span> <span class="string">all</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装及配置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装及配置&quot;&gt;&lt;/a&gt; 安装及配置&lt;/h1&gt;
&lt;p&gt;首先安装如下软件，安装过程无脑点击下一步即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://git-s
      
    
    </summary>
    
    
      <category term="Blog" scheme="https://zhangxiaocn.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zhangxiaocn.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="https://zhangxiaocn.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
