{"meta":{"title":"ZhangXiao's Blog","subtitle":"清风湿润，茶烟轻扬。","description":null,"author":"Zhang Xiao","url":"https://zhangxiaocn.github.io","root":"/"},"pages":[{"title":"关于","date":"2019-10-27T11:50:02.762Z","updated":"2019-10-27T11:50:02.762Z","comments":false,"path":"about/index.html","permalink":"https://zhangxiaocn.github.io/about/index.html","excerpt":"","text":"一名在校大学生，目前正在学习 ROS 相关知识。 联系邮箱：zhangxiaoim@foxmail.com"},{"title":"分类","date":"2019-10-26T06:03:38.496Z","updated":"2019-10-26T06:03:38.496Z","comments":false,"path":"categories/index.html","permalink":"https://zhangxiaocn.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-10-26T07:15:40.459Z","updated":"2019-10-26T07:15:40.459Z","comments":true,"path":"links/index.html","permalink":"https://zhangxiaocn.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-10-26T06:23:34.166Z","updated":"2019-10-26T06:23:34.166Z","comments":false,"path":"repository/index.html","permalink":"https://zhangxiaocn.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-10-26T06:03:38.499Z","updated":"2019-10-26T06:03:38.499Z","comments":false,"path":"tags/index.html","permalink":"https://zhangxiaocn.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"我初学 C 的代码保留","slug":"my-c-memory","date":"2019-10-27T13:23:55.000Z","updated":"2019-10-27T13:25:47.916Z","comments":true,"path":"2019/10/27/my-c-memory/","link":"","permalink":"https://zhangxiaocn.github.io/2019/10/27/my-c-memory/","excerpt":"","text":"以下内容为本人初学 C 的时候所写的部分代码，有些程序现在看起来写的真的很烂哈哈，但是舍不得删除呐，最后还是将它们保留了下来。。。这算不算是松鼠症？？ 求和问题求 1 + 2! + 3! + … + 20! 的和： 123456789int sum(void) &#123; float a = 1, b = 0, i; for (i = 1; i &lt;= 20; i++) &#123; a = a * i; b = b + a; &#125; printf(\"1 + 2! + 3! ... + 20! = %.0f\\n\", b); return 0;&#125; 求 1 + 2 + … + 100 的和： 123456789101112int sum(void) &#123; int a, b = 0; a = 1;loop: if (a &lt;= 100) &#123; b = b + a; a++; goto loop; &#125; printf(\"1 + 2 + ... + 100 的和为：%d\\n\", b); return 0;&#125; 有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13 … 求出这个数列的前 20 项之和： 123456789101112int sum(void) &#123; int i; float a = 2, b = 1, c = 0, d; for (i = 1; i &lt;= 20; i++) &#123; c = a / b + c; d = a; a = a + b; b = d; &#125; printf(\"这个数列的前20项之和为：%f\\n\", c); return 0;&#125; 求序列 S = 2/1 + 3/2 + 5/3 + 8/5 + 13/8 + …… 前 n 项和： 123456789101112131415int sum(void) &#123; float S = 0, s1 = 2, s2 = 1; int a, n; printf(\"请输入 n 的值：\"); scanf(\"%d\", &amp;n); for (a = 0; a &lt; n; a++) &#123; S = (s1 / s2) + S; s2 = s1; s1 = (2 * s1) - 1; &#125; printf(\"S = 2/1 + 3/2 + 5/3 + 8/5 + 13/8 + …… 前 n 项和为：%f\", S); printf(\"\\n\"); return 0;&#125; 求 1 到 100 之间的奇数之和，偶数之和： 123456789101112int sum(void) &#123; int i, sum1 = 0, sum2 = 0; for (i = 1; i &lt;= 100; i++) &#123; if (i % 2 != 0) sum1 += i; else sum2 += i; &#125; printf(\"1~100 的奇数和为：%d\\n\", sum1); printf(\"1~100 的偶数和为：%d\\n\", sum2); return 0;&#125; 阶乘问题求 n 的阶乘 n!： 1234567891011int factorial(void) &#123; int i = 1, s = 1, n; printf(\"请输入需要求阶乘的数字：\"); scanf(\"%d\", &amp;n); do &#123; s = s * i; i++; &#125; while (i &lt;= n); printf(\"%d! = %d\\n\", n, s); return 0;&#125; 12345678int factorial(void) &#123; int i, s, n; printf(\"请输入需要求阶乘的数字：\"); scanf(\"%d\", &amp;n); for (i = 1, s = 1; i &lt;= n; i++) s = s * i; printf(\"%d! = %d\\n\", n, s); return 0;&#125; 1234567891011int factorial(void) &#123; int i = 1, s = 1, n; printf(\"请输入需要求阶乘的数字：\"); scanf(\"%d\", &amp;n); while (i &lt;= n) &#123; // 一直算到 i &gt; n 时循环结束，输出 s = s * i; i++; &#125; printf(\"%d! = %d\\n\", n, s); return 0;&#125; 素数问题判断输入的数字是否为素数： 1234567891011121314151617int prime_number(void) &#123; int a = 0, i; int n = 0; printf(\"输入一个整数：\"); scanf(\"%d\", &amp;n); for (i = 2; i &lt; n; i++) &#123; if (n % i == 0) &#123; a++; &#125; &#125; if (a == 0) &#123; printf(\"%d 是素数\\n\", n); &#125; else &#123; printf(\"%d 不是素数\\n\", n); &#125; return 0;&#125; 求出 100~200 之间的所有素数： 1234567891011121314151617int prime_number(void) &#123; int m, i, a = 0, b = 0; printf(\"\\n\"); printf(\"100~200 之间的所有素数为：\"); for (m = 101; m &lt;= 200; m++) &#123; for (i = 2; i &lt; m; i++) &#123; if (m % i == 0) a++; &#125; if (a == 0) &#123; printf(\"%-4d\", m); b++; &#125; else a = 0; &#125; printf(\"\\n这些素数一共有 %d 个\", b); return 0;&#125; 求 100~300 之间所有素数之和： 1234567891011121314151617181920int prime_number(void) &#123; int m, i, a = 0, b = 0, c, d = 0; printf(\"\\n\"); printf(\"100 ~ 300之间所有素数之和为：\"); for (m = 101; m &lt;= 300; m++) &#123; for (i = 2; i &lt; m; i++) &#123; if (m % i == 0) a++; &#125; if (a == 0) &#123; c = m; d = c + d; &#125; else a = 0; &#125; printf(\"%d\", d); printf(\"\\n\"); return 0;&#125; 编写一个程序，从键盘输入一个整数，输出大于且紧随该整数的素数： 1234567891011121314151617181920int prime_number(void) &#123; int a = 0, i, n, m; printf(\"输入一个整数：\"); scanf(\"%d\", &amp;n); m = n + 1;A: for (i = 2; i &lt; m; i++) &#123; if (m % i == 0) &#123; a++; &#125; &#125; if (a == 0) &#123; printf(\"大于且最接近输入的数的素数是：%d\\n\", m); &#125; else &#123; m = m + 1; a = 0; goto A; &#125; return 0;&#125; 1234567891011121314151617int prime_number(void) &#123; int i, m, c; scanf(\"%d\", &amp;m); while (1) &#123; m++; c = 1; for (i = 2; i &lt; m; i++) &#123; if (m % i == 0) &#123; c = 0; break; &#125; &#125; if (c == 1) break; &#125; printf(\"%d\\n\", m); return 0;&#125; 排序问题从键盘输入 10 个整数，编程求出其中的最大值和最小值，并输出结果： 1234567891011121314int sort(void) &#123; int max, min, m[10], i; printf(\"请输出10个数：\"); for (i = 0; i &lt; 10; i++) scanf(\"%d\", &amp;m[i]); // 输入 10 个数字，保存到 m[i] 中 max = min = m[0]; // 定义最值 for (i = 1; i &lt; 10; i++) if (max &lt; m[i]) // m[i] 依次与最值比较，得出最大值 max max = m[i]; else if (min &gt; m[i]) // m[i] 依次与最值比较，得出最小值 min min = m[i]; printf(\"最大值 = %d\\n最小值 = %d\", max, min); return 0;&#125; 将输入的五个整数按照从小到大顺序排列： 12345678910111213141516171819int sort(void) &#123; int a[5]; int i, j, t; printf(\"请输入5个数：\"); for (i = 0; i &lt; 5; i++) scanf(\"%d\", &amp;a[i]); printf(\"\\n\"); for (j = 0; j &lt; 4; j++) // 进行 4 次循环，实现 4 趟比较 for (i = 0; i &lt; 4 - j; i++) // 在每一趟比较中进行 4－1 次比较 if (a[i] &gt; a[i + 1]) // 相邻两个数比较 &#123; t = a[i]; a[i] = a[i + 1]; a[i + 1] = t; &#125; printf(\"排序后的数据为：\"); for (i = 0; i &lt; 5; i++) printf(\"%d \", a[i]); printf(\"\\n\"); return 0;&#125; 输出图像输出一个菱形： 1234567891011121314int diamond(void) &#123; int a, b, c; for (a = 0; a &lt; 4; a++) &#123; for (b = 0; b &lt;= 2 - a; b++) printf(\" \"); for (c = 0; c &lt;= 2 * a; c++) printf(\"*\"); printf(\"\\n\"); &#125; for (a = 0; a &lt;= 2; a++) &#123; for (b = 0; b &lt;= a; b++) printf(\" \"); for (c = 0; c &lt;= 4 - 2 * a; c++) printf(\"*\"); printf(\"\\n\"); &#125; return 0;&#125; 输出一个行数可调的菱形： 12345678910int diamond(void) &#123; int n, i, j; scanf(\"%d\", &amp;n); // 输入一个 n，则输出 2*n+1 行 for (i = -n; i &lt;= n; i++) &#123; for (j = 1; j &lt;= abs(i); j++) printf(\" \"); for (j = 1; j &lt;= 2 * n + 1 - 2 * abs(i); j++) printf(\"*\"); printf(\"\\n\"); &#125; return 0;&#125; 输出空心菱形： 12345678910111213141516171819202122232425262728293031323334353637int diamond(void) &#123; int i, j, k, line, m; printf(\"请输入行数：\"); scanf(\"%d\", &amp;line); m = (line + 1) / 2; for (i = 1; i &lt;= m; i++) &#123; for (k = 0; k &lt; m - i; k++) &#123; printf(\" \"); &#125; printf(\"*\"); if (i == 1) &#123; printf(\"\\n\"); continue; &#125; for (j = 0; j &lt; 2 * i - 3; j++) &#123; printf(\" \"); &#125; printf(\"*\"); printf(\"\\n\"); &#125; for (i = m - 1; i &gt; 0; i--) &#123; for (k = 0; k &lt; m - i; k++) &#123; printf(\" \"); &#125; printf(\"*\"); if (i == 1) &#123; printf(\"\\n\"); continue; &#125; for (j = 0; j &lt; 2 * i - 3; j++) &#123; printf(\" \"); &#125; printf(\"*\"); printf(\"\\n\"); &#125; return 0;&#125; 输出一个正方形中的空心菱形（行数可控）： 123456789101112131415161718192021int diamond(void) &#123; int n, i, j; printf(\"请输入这个空心菱形的行数：\"); scanf(\"%d\", &amp;n); printf(\"\\n\"); for (i = -(n / 2); i &lt;= n / 2; i++) &#123; if (i == -(n / 2) || i == (n / 2)) &#123; //第一行和最后一行 for (j = 1; j &lt;= n; j++) &#123; printf(\"*\"); &#125; printf(\"\\n\"); &#125; else &#123; for (j = 1; j &lt;= abs(i) + 1; j++) printf(\"*\"); for (j = 1; j &lt;= (n - 2 * (abs(i) + 1)); j++) printf(\" \"); for (j = 1; j &lt;= abs(i) + 1; j++) printf(\"*\"); printf(\"\\n\"); &#125; &#125; printf(\"\\n\"); return 0;&#125; 文字玩法输入一个 5 位数，判断它是不是回文数： 1234567891011121314151617181920int palindrome(void) &#123; int x; // 带输入的数 int g, w, s, q; // 分别表示的是个位、万位、十位、千位 printf(\"请输入一个 5 位数：\"); scanf(\"%d\", &amp;x); if (x &gt; 99999 || x &lt; 10000) printf(\"您输入的 %d 不是一个 5 位数\\n\", x); else &#123; g = x % 10; w = x / 10000; s = (x % 100) / 10; q = (x % 10000) / 1000; if (g == w &amp;&amp; s == q) printf(\"%d 是一个回文数\\n\", x); else printf(\"%d 不是一个回文数\\n\", x); &#125; return 0;&#125; 输出 9×9 口诀表： 123456789101112int table(void) &#123; int i, j, result; printf(\"\\n\"); for (i = 1; i &lt; 10; i++) &#123; for (j = 1; j &lt; 10; j++) &#123; result = i * j; printf(\"%d*%d=%-3d\", i, j, result); // -3d 表示左对齐，占 3 位 &#125; printf(\"\\n\"); // 每一行后换行 &#125; return 0;&#125;","categories":[{"name":"C","slug":"C","permalink":"https://zhangxiaocn.github.io/categories/C/"}],"tags":[{"name":"回忆","slug":"回忆","permalink":"https://zhangxiaocn.github.io/tags/%E5%9B%9E%E5%BF%86/"},{"name":"C","slug":"C","permalink":"https://zhangxiaocn.github.io/tags/C/"}]},{"title":"Hexo yilia主题的启用及设置","slug":"hexo-theme-yilia","date":"2019-10-25T13:57:17.000Z","updated":"2019-10-26T06:16:36.822Z","comments":true,"path":"2019/10/25/hexo-theme-yilia/","link":"","permalink":"https://zhangxiaocn.github.io/2019/10/25/hexo-theme-yilia/","excerpt":"","text":"yilia 主题作者已经不维护了，还有好多坑没有填完，在此记录一下 主题地址：https://github.com/litten/hexo-theme-yilia 本文章同步更新地址：https://www.cnblogs.com/zhangxiaochn/p/Hexo_Theme_Yilia.html 主题的启用下载并启用进入命令行，下载 yilia 主题，输入： 1git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 修改站点配置文件 _config.yml，找到如下代码： 12## Themes: https://hexo.io/themes/theme: landscape 将 landscape 修改为 yilia 即可。 修改语言打开站点配置文件，搜索language，找到如下代码： 123author:language:timezone: 在 language 后面输入 zh-CN。 注意：冒号后面必须有一个空格。 主题相关设置“所有文章”按钮的安装首先使用命令 node -v 检查版本是不是大于 6.2 在博客根目录执行以下命令： 1npm i hexo-generator-json-content --save 在博客配置文件 _config.yml 最下面加上： 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: false raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 添加图片资源文件夹路径为 themes/yilia/source/ 下，可添加一个 assets 文件夹，里面存放图片资源即可 需要添加头像或者微信/支付宝二维码图片，直接引用即可。路径为 themes/yilia/_config.yml 。 12345678# 微信二维码图片weixin: /assets/img/wechat.png# 头像图片avatar: /assets/img/head.jpg# 网页图标favicon: /assets/img/head.jpg 文章显示摘要在你 MD 格式文章正文插入 &lt;!-- more --&gt; 即可，只会显示它之前的，此后的就不显示，点击文章标题，全文阅读才可看到，同时注释掉文件 themes/yilia/_config.yml 里的： 1# excerpt_link: more 文章显示目录增加文章目录 TOC ( table of content )，方便阅读文章，在 themes/yilia/_config.yml 中进行配置 toc: 2 即可，它会将你 Markdown 语法的标题，生成目录，目录查看在右下角。 增加归档菜单修改 themes/yilia/_config.yml 内容： 123menu: 主页: / 归档: /archives/index.html 修复失效的微信分享二维码 打开 themes\\yilia\\layout\\_partial\\post\\share.ejs 文件 把第49行中的 //pan.baidu.com/share/qrcode?url= 修改为： 1//api.qrserver.com/v1/create-qr-code/?size=150x150&amp;data= 更改左侧昵称字体在 themes\\yilia\\source\\main.0cf68a.css 文件里面修改，找到 header-author ，修改里面的 font-family ，改成： 1font-family:\"Times New Roman\",Georgia,Serif 左侧显示总文章数打开 themes\\yilia\\layout\\_partial\\left-col.ejs 文件 在： 1234567&lt;nav class=&quot;header-menu&quot;&gt; &lt;ul&gt; &lt;% for (var i in theme.menu)&#123; %&gt; &lt;li&gt;&lt;a href=&quot;&lt;%- url_for(theme.menu[i]) %&gt;&quot;&gt;&lt;%= i %&gt;&lt;/a&gt;&lt;/li&gt; &lt;%&#125;%&gt; &lt;/ul&gt;&lt;/nav&gt; 后面添加： 123&lt;nav&gt; 总文章数 &lt;%=site.posts.length%&gt;&lt;/nav&gt; 添加字数统计首先安装 hexo-wordcount 使用如下命令安装： 1npm i --save hexo-wordcount Node 版本7.6.0之前,请安装 2.x 版本 (Node.js v7.6.0 and previous) 1npm install hexo-wordcount@2 --save 然后在 themes\\yilia\\layout\\_partial\\left-col.ejs中添加： 123&lt;nav&gt; 总字数 &lt;span class=&quot;post-count&quot;&gt;&lt;%= totalcount(site, &apos;0,0.0a&apos;) %&gt;&lt;/span&gt;&lt;/nav&gt; 添加位置在如下代码的下面： 123&lt;nav&gt; 总文章数 &lt;%=site.posts.length%&gt;&lt;/nav&gt; 编辑 themes\\yilia\\layout\\_partial\\article.ejs 在header下面加入： 123&lt;div align=&quot;center&quot; class=&quot;post-count&quot;&gt; 字数：&lt;%= wordcount(post.content) %&gt;字 | 预计阅读时长：&lt;%= min2read(post.content) %&gt;分钟&lt;/div&gt; 即可显示单篇字数和预计阅读时长。 添加来必力(livere)评论系统yilia 默认带了几个系统，但是没有来必力，所以可以自己加 首先是去注册来必力，然后获取到自己的 id 新建 themes\\yilia\\layout\\_partial\\comment\\livere.ejs 文件，输入如下内容： 123456789101112131415161718&lt;!-- 来必力City版安装代码 --&gt;&lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;&lt;%=theme.livere_uid%&gt;&quot;&gt;&lt;script type=&quot;text/javascript&quot;&gt; (function(d, s) &#123; var j, e = d.getElementsByTagName(s)[0]; if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125; j = d.createElement(s); j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;; j.async = true; e.parentNode.insertBefore(j, e); &#125;)(document, &apos;script&apos;);&lt;/script&gt;&lt;noscript&gt;为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;&lt;/div&gt;&lt;!-- City版安装代码已完成 --&gt; 然后编辑 themes\\yilia\\layout\\_partial\\article.ejs 文件，找到：&lt;% if (!index &amp;&amp; post.comments){ %&gt; ，添加： 1234567&lt;% if (theme.livere)&#123; %&gt;&lt;%- partial(&apos;comment/livere&apos;, &#123;key: post.slug,title: post.title,url: config.url+url_for(post.path)&#125;) %&gt;&lt;% &#125; %&gt; 在主题配置文件 themes\\yilia\\_config.yml 中添加以下内容： 12livere: truelivere_uid: 你的id 关闭信息收集（自选）关于访问 litten.me:9005 的问题，这个主题的作者之前为了更好地完善这个主题，有时候会收集用户的客户端信息，详情请见 https://github.com/litten/hexo-theme-yilia/issues/528 ，如果不想被统计，就将 themes\\yilia\\source-src\\js\\report.js 里面的内容清空。不过这个请求是异步的，不会影响博客加载速度，而且作者已经不维护了，所以关不关都行。","categories":[{"name":"Blog","slug":"Blog","permalink":"https://zhangxiaocn.github.io/categories/Blog/"}],"tags":[{"name":"Blog","slug":"Blog","permalink":"https://zhangxiaocn.github.io/tags/Blog/"},{"name":"美化","slug":"美化","permalink":"https://zhangxiaocn.github.io/tags/%E7%BE%8E%E5%8C%96/"}]},{"title":"Hexo+Github 创建个人博客","slug":"create-blog","date":"2019-10-25T11:54:41.000Z","updated":"2019-10-26T06:16:24.661Z","comments":true,"path":"2019/10/25/create-blog/","link":"","permalink":"https://zhangxiaocn.github.io/2019/10/25/create-blog/","excerpt":"","text":"安装及配置首先安装如下软件，安装过程无脑点击下一步即可。 Node.js：建议下载 LTS 长期支持版 git 安装完成后，在 cmd 里输入 git version 即可查看 git 当前版本。输入 node -v 即可查看 node.js 当前版本。 接下来，新建一个文件夹，创建的位置任选。该文件夹主要用来存放博客的所有文件。然后进入该文件夹（这里就是博客文件夹的根目录，后文很多地方会用到），右键选择 Git Bash Here 选项。 在弹出的窗口中，输入 npm config set registry https://registry.npm.taobao.org 切换为淘宝源，从而加快下载速度。 接着，输入 npm i -g hexo 安装 hexo。 安装完成后，在当前窗口中，输入 hexo -v 即可查看 hexo 当前版本。 然后，我们输入命令 hexo init，初始化 hexo ，完成后打开我们的博客文件夹，即可看到该文件夹里有很多的文件了，这些都是我们搭建博客所需要的文件。 github 配置首先进入 github 官网，注册新账号，账号名称一定要想好了再填，不然你会后悔的。。。 注册成功后点击右上角的 New repository，在 Reposotory name 栏中填入 yourname.github.io （yourname 改为你账号的名称），然后点击 Create reposutory。 接着我们回到博客文件夹的根目录，右键选择 Git Bash Here 选项，配置 github 账户的信息，输入： 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; 命令中的 yourname 和 youremail 分别改为你的账户名以及你创建该账户的邮箱。 然后输入cd ~/.ssh 检查电脑中的 SSH Key，会出现提示： No such file or directory 。 接下来我们开始创建 SSH。回到博客文件夹的根目录，右键选择 Git Bash Here 选项，输入 ssh-keygen -t rsa -C &quot;youremail@example.com，将 youremail@example.com 改为你的账户邮箱。一路回车即可。 紧接着输入： 12cd ~/.sshcat id_rsa.pub 将获取的 ssh 复制下来，打开 github 首页，点击页面右上角的头像，选择 Settings，在下面的选项中找到 SSH and GPG keys 。点击 New SSH key ，Title 里的内容可以自定义，Key 里粘贴刚才复制的内容。点击 add key。 返回到博客文件夹的根目录，右键选择 Git Bash Here 选项，输入 ssh -T git@github.com 。 若弹出 Are you sure you want to continue connecting (yes/no)? 时输入 yes 并回车。 接着出现 Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 则操作成功。 博客配置打开你的博客文件夹，找到 _config.yml 文件并打开，在最后修改并添加如下代码： 1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 将 YourgithubName 改为你的 github 账号名。保存文件。 回到博客文件夹的根目录，右键选择 Git Bash Here 选项，分别执行以下命令： 123hexo cleanhexo ghexo s 接着打开浏览器，在浏览器中输入 http://localhost:4000 即可看到你的本地博客了。 博客上传在博客文件夹的根目录，右键选择 Git Bash Here 选项，输入 npm install hexo-deployer-git --save 安装部署到 github 的插件。 然后执行以下命令： 123hexo cleanhexo ghexo d 中途可能会出现弹窗需要输入 github 账号和密码。输入完即可。 接下来等待十分钟左右，等待 github 将博客文件配置完成。 在浏览器中输入 https://yourgithubname.github.io （yourgithubname 为你的 github 账号名）即可看到你的个人博客了。 创建文章博客搭建完成后，在博客文件夹的根目录，右键选择 Git Bash Here 选项，输入 hexo n yourtitle （yourtitle 改为你自定义的文章标题）即可创建文章，文章保存的路径在 博客文件夹根目录/source/_posts 文件夹中，文件格式为 markdown 格式，想要写文章的朋友可以自学 markdown 语法，然后就可以打开这个文件进行写作了。 写作完成后，进入你的博客文件夹根目录，右键选择 Git Bash Here 选项 ，输入： 123hexo cleanhexo ghexo d 即可上传到 github。 绑定域名不需要更换域名的朋友可以跳过这一节。 GitHub Pages 支持使用自己的域名，喜欢个性化的朋友可以选择一个合适的域名绑定博客。 以下用阿里云举例。 首先购买一个域名，购买完成后，如果没有进行过实名认证的话，一定要进行实名认证，也就是域名状态那里。 进行实名认证后，进行域名解析。首先进入博客文件夹根目录，右键选择 Git Bash Here 选项，然后输入 ping @yourname.github.io ，得到 IP 并复制。 进入阿里云控制台，点击域名后面的 解析，添加如下记录： 记录类型 主机记录 记录值 TTL CNAME @ yourname.github.io 10分钟 A www yourIP 10分钟 将 yourname 改为你的 github 账户名，将 yourIP 改为你刚才复制的 IP。其他保持默认即可。 进入 github，打开刚刚创建的仓库，打开 Setting ，找到 Github pages ，在 Custom domain 里输入你购买的域名，例如: www.yourname.com ( www. 可以不写 ) ，点击 save ，勾选下面的 Enforce HTTPS 选项。 进入博客文件夹根目录，找到 source ，在里面创建一个文本文档，输入你购买的域名，例如： www.yourname.com ( www. 可以不写 )，保存后重命名为 CNAME ，并将文件后缀名删除。 然后进入博客文件夹根目录，右键选择 Git Bash Here 选项，输入 hexo d -g 即可。等待 10 分钟左右时间便可以用新域名访问博客。 hexo 常用指令平常我们用到的指令如下： hexo clean：清除缓存文件和已生成的静态文件。 hexo g：生成静态文件。 hexo s：启动服务器。默认情况下，访问网址为： http://localhost:4000/ 。 hexo d：部署网站。 hexo v：显示 Hexo 版本。 可以进入Hexo文档 查看更多指令。 博客配置文件详解 “配置文件” 为博客根目录的 _config.yml 文件 部分注释来自互联网 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site（标题等必填）#网站标题title:#网站副标题subtitle:#网站描述description:#作者昵称author:#网站语言，默认英语，设置简体中文language: zh-CN#时区，默认电脑时区timezone: Asia/Shanghai# URL#如果网站是放在子目录中，将url设置成'http://yoursite.com/child'，将root设置成'/child/'## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'#网址（输入你的GitHub Pages地址）url: http://用户名.github.io#网站根目录。如果网站是放在子目录中，将root设置成'子目录名'root: /#文章链接地址格式 。即文章存放的目录。（**注意**：为方便网络爬虫抓取博客信息，一般都会把网址设置成“三段”，而Hexo默认为“域名:年:月:日:标题”五段。强烈建议修改为**:year:month:day/:title/**以便于抓取。）permalink: :year:month:day/:title/permalink_defaults:# Directory#资源文件夹，放在里面的文件会上传到github中source_dir: source#公共文件夹，存放生成的静态文件public_dir: public#标签文件夹，默认是tags。实际存放在source/tags中。tag_dir: tagsrss_dir: rss#档案文件夹，默认是archives。archive_dir: archives#分类文件夹，默认是categories。实际存放在source/categories中。category_dir: categories#代码文件夹，默认是downloads/codecode_dir: downloads/code#国际化文件夹，默认跟language相同i18n_dir: :lang#不需要渲染的文件夹或文件夹,格式为[文件名]skip_render:# Writing# 新建博文（帖子）的默认名称# File name of new postsnew_post_name: :title.md#默认布局模板是post，而不是draft和pagedefault_layout: post#是否将标题转换成标题形式（首字母大写）titlecase: false # Transform title into titlecase#在新标签页面中打开网页external_link: true # Open external links in new tabfilename_case: 0#是否渲染草稿render_drafts: false#启动 Asset 文件夹post_asset_folder: false#把链接改为与根目录的相对位址relative_link: false#显示未来的文章future: true#代码块的设置highlight:enable: true # 使用代码高亮line_number: true # 显示行号auto_detect: true # 自动检测语言tab_replace:# Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:path: ''#每页文章数量per_page: 10#排序依据order_by: -date# Category &amp; Tag#默认分类default_category: uncategorized#分类别名category_map:#标签别名tag_map:# Date / Time format#Hexo 使用 Moment.js 来解析和显示时间。## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions 拓展插件配置## Plugins: https://hexo.io/plugins/#主题配置## Themes: https://hexo.io/themes/#选择主题,默认为landscapetheme: landscape# ---------------下面选项需要对应插件的支持---------------# 部署配置## Docs: https://hexo.io/docs/deployment.htmldeploy:type: gitrepo: git@github.com:用户名/用户名.github.io.gitbranch: master# 配置RSSfeed:#feed 类型 (atom/rss2)type: atom#rss 路径path: atom.xml#在 rss 中最多生成的文章数(0显示所有)limit: 0# 自定义站点内容搜索# 需要先安装插件：# npm install hexo-generator-search --savesearch:path: search.xml# 如只想索引文章，可设置为postfield: all# ---------------------------------------------------","categories":[{"name":"Blog","slug":"Blog","permalink":"https://zhangxiaocn.github.io/categories/Blog/"}],"tags":[{"name":"Blog","slug":"Blog","permalink":"https://zhangxiaocn.github.io/tags/Blog/"},{"name":"Hexo","slug":"Hexo","permalink":"https://zhangxiaocn.github.io/tags/Hexo/"}]}]}